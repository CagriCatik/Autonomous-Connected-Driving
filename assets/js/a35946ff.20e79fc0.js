"use strict";(self.webpackChunkacd=self.webpackChunkacd||[]).push([[3395],{5429:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"cpp/Introduction/statement","title":"Statements","description":"---","source":"@site/docs/cpp/Introduction/02_statement.md","sourceDirName":"cpp/Introduction","slug":"/cpp/Introduction/statement","permalink":"/Autonomous-Connected-Driving/docs/cpp/Introduction/statement","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cpp/Introduction/02_statement.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"cppSidebar","previous":{"title":"Syntax","permalink":"/Autonomous-Connected-Driving/docs/cpp/Introduction/syntax"},"next":{"title":"Output for Text","permalink":"/Autonomous-Connected-Driving/docs/cpp/Introduction/print_text"}}');var i=t(4848),r=t(8453);const o={},a="Statements",l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"1. What Are C++ Statements?",id:"1-what-are-c-statements",level:3},{value:"Example of a Single Statement:",id:"example-of-a-single-statement",level:2},{value:"Example of an Error Without a Semicolon:",id:"example-of-an-error-without-a-semicolon",level:2},{value:"2. Many Statements in a Program",id:"2-many-statements-in-a-program",level:3},{value:"Example: Sequential Statements",id:"example-sequential-statements",level:2},{value:"3. C++ Statements in Autonomous Driving Applications",id:"3-c-statements-in-autonomous-driving-applications",level:3},{value:"Real-World Example: Logging System Events",id:"real-world-example-logging-system-events",level:2},{value:"4. Statements in Error Handling",id:"4-statements-in-error-handling",level:3},{value:"Example: Error Logging Statements",id:"example-error-logging-statements",level:2},{value:"5. Combining Statements with Control Structures",id:"5-combining-statements-with-control-structures",level:3},{value:"Example: Processing Sensor Data",id:"example-processing-sensor-data",level:2},{value:"6. Common Errors with Statements",id:"6-common-errors-with-statements",level:3},{value:"7. Practical Application: Sequential Task Execution",id:"7-practical-application-sequential-task-execution",level:3},{value:"Example: Vehicle Start Sequence",id:"example-vehicle-start-sequence",level:2},{value:"8. Tips for Writing Effective Statements in C++",id:"8-tips-for-writing-effective-statements-in-c",level:3},{value:"Conclusion",id:"conclusion",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"statements",children:"Statements"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["In C++, ",(0,i.jsx)(n.strong,{children:"statements"})," are the fundamental building blocks of a program. They define the instructions the computer will execute, making them essential for writing robust and functional code. For ",(0,i.jsx)(n.strong,{children:"autonomous driving systems"}),", understanding and utilizing statements effectively is critical for tasks such as controlling vehicle behavior, processing sensor data, and managing real-time operations."]}),"\n",(0,i.jsx)(n.p,{children:"This tutorial will introduce C++ statements and their role in autonomous driving through practical examples."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"1-what-are-c-statements",children:"1. What Are C++ Statements?"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"statement"})," is a single instruction written in a C++ program. Each statement must end with a ",(0,i.jsx)(n.strong,{children:"semicolon"})," (",(0,i.jsx)(n.code,{children:";"}),") to indicate the end of the instruction."]}),"\n",(0,i.jsx)(n.h2,{id:"example-of-a-single-statement",children:"Example of a Single Statement:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'cout << "Autonomous driving system initialized.";\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Instruction:"})," Prints the message to the screen."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Semicolon (",(0,i.jsx)(n.code,{children:";"}),") Importance:"]})," If omitted, the compiler will throw an error."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-of-an-error-without-a-semicolon",children:"Example of an Error Without a Semicolon:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'cout << "Autonomous driving system initialized"\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Error:"})," ",(0,i.jsx)(n.code,{children:"error: expected ';' before 'return'"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"2-many-statements-in-a-program",children:"2. Many Statements in a Program"}),"\n",(0,i.jsx)(n.p,{children:"Most C++ programs contain multiple statements, executed one by one in the order they are written."}),"\n",(0,i.jsx)(n.h2,{id:"example-sequential-statements",children:"Example: Sequential Statements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << "Initializing sensors...\\n";\n    cout << "Calibrating LiDAR...\\n";\n    cout << "System ready for operation.\\n";\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:'The first statement prints "Initializing sensors...".'}),"\n",(0,i.jsx)(n.li,{children:'The second statement prints "Calibrating LiDAR...".'}),"\n",(0,i.jsx)(n.li,{children:'The third statement prints "System ready for operation.".'}),"\n",(0,i.jsxs)(n.li,{children:["The final statement (",(0,i.jsx)(n.code,{children:"return 0;"}),") indicates the program executed successfully."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"3-c-statements-in-autonomous-driving-applications",children:"3. C++ Statements in Autonomous Driving Applications"}),"\n",(0,i.jsx)(n.h2,{id:"real-world-example-logging-system-events",children:"Real-World Example: Logging System Events"}),"\n",(0,i.jsx)(n.p,{children:"In autonomous driving, sequential statements can be used to log system events during initialization."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << "Starting Autonomous Driving System...\\n";\n    cout << "Loading navigation maps...\\n";\n    cout << "Activating vehicle control module...\\n";\n    cout << "System operational.\\n";\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Starting Autonomous Driving System...\nLoading navigation maps...\nActivating vehicle control module...\nSystem operational.\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"4-statements-in-error-handling",children:"4. Statements in Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"In an autonomous driving system, handling errors is vital. C++ statements can be used to log errors when a module fails."}),"\n",(0,i.jsx)(n.h2,{id:"example-error-logging-statements",children:"Example: Error Logging Statements"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nusing namespace std;\n\nint main() {\n    bool sensorActive = false;  // Simulate a sensor error\n\n    if (!sensorActive) {\n        cout << "Error: Sensor initialization failed.\\n";\n    }\n\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If the sensor is not active, the program outputs an error message."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"5-combining-statements-with-control-structures",children:"5. Combining Statements with Control Structures"}),"\n",(0,i.jsx)(n.p,{children:"While basic statements execute sequentially, control structures allow conditional or repetitive execution of statements. For example, in autonomous driving, statements can be executed repeatedly to process continuous sensor input."}),"\n",(0,i.jsx)(n.h2,{id:"example-processing-sensor-data",children:"Example: Processing Sensor Data"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nusing namespace std;\n\nint main() {\n    int distances[] = {12, 15, 8, 20};  // Simulated distance data (in meters)\n\n    for (int i = 0; i < 4; ++i) {\n        cout << "Obstacle " << i + 1 << " is " << distances[i] << " meters away.\\n";\n    }\n\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Obstacle 1 is 12 meters away.\nObstacle 2 is 15 meters away.\nObstacle 3 is 8 meters away.\nObstacle 4 is 20 meters away.\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"6-common-errors-with-statements",children:"6. Common Errors with Statements"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Missing Semicolon:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error:"})," Forgetting the semicolon results in a compilation error."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution:"})," Ensure every statement ends with a semicolon."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'cout << "Hello World" // Missing semicolon\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Improper Syntax:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error:"})," Typos or incorrect syntax in the statement can cause errors."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution:"})," Double-check syntax before compiling."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'cout << "Hello World! << endl;  // Missing closing quote\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Order of Execution:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error:"})," Statements execute in the order written. If the order is incorrect, the program may not function as intended."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution:"})," Carefully plan the sequence of statements."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'cout << "System ready.\\n";\ncout << "Initializing...\\n";  // Wrong order\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"7-practical-application-sequential-task-execution",children:"7. Practical Application: Sequential Task Execution"}),"\n",(0,i.jsx)(n.p,{children:"In autonomous driving systems, statements can represent tasks executed in sequence, such as system initialization and real-time monitoring."}),"\n",(0,i.jsx)(n.h2,{id:"example-vehicle-start-sequence",children:"Example: Vehicle Start Sequence"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << "Starting vehicle...\\n";\n    cout << "Checking all sensors...\\n";\n    cout << "Sensors operational.\\n";\n    cout << "Vehicle in autonomous mode.\\n";\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Starting vehicle...\nChecking all sensors...\nSensors operational.\nVehicle in autonomous mode.\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"8-tips-for-writing-effective-statements-in-c",children:"8. Tips for Writing Effective Statements in C++"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Meaningful Messages:"})," Provide clear output messages, especially for logging in critical systems like autonomous vehicles."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Minimize Errors:"})," Always double-check for missing semicolons or typos."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Plan Execution Order:"})," Ensure statements are ordered logically to reflect the intended sequence of tasks."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"C++ statements form the core of every program, providing the instructions the computer executes. In autonomous driving applications, writing clear, logical, and error-free statements is essential to ensure smooth operation and effective debugging. By practicing with examples like logging system events and processing sensor data, you can master the use of statements in real-world scenarios."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);