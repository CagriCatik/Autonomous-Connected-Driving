"use strict";(self.webpackChunkacd=self.webpackChunkacd||[]).push([[2209],{9163:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"theory/connected-driving/introduction/categories","title":"Connectivity in Automated Driving","description":"Connectivity plays a pivotal role in automated driving, enabling a multitude of functions that enhance efficiency, safety, and overall functionality. These connectivity-enabled functions can be categorized into Cooperative Functions, Collective Functions, and Supportive Functions. This documentation delves into each category, providing comprehensive insights supported by concepts from the ACDC course material.","source":"@site/docs/theory/connected-driving/01_introduction/02_categories.md","sourceDirName":"theory/connected-driving/01_introduction","slug":"/theory/connected-driving/introduction/categories","permalink":"/Autonomous-Connected-Driving/docs/theory/connected-driving/introduction/categories","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/theory/connected-driving/01_introduction/02_categories.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"connectedSidebar","previous":{"title":"Introduction to Connected Driving","permalink":"/Autonomous-Connected-Driving/docs/theory/connected-driving/introduction/"},"next":{"title":"Challenges of Automated and Connected Driving","permalink":"/Autonomous-Connected-Driving/docs/theory/connected-driving/introduction/challenges"}}');var o=i(4848),s=i(8453);const r={},a="Connectivity in Automated Driving",c={},l=[{value:"Cooperative Functions",id:"cooperative-functions",level:2},{value:"Characteristics",id:"characteristics",level:3},{value:"Examples",id:"examples",level:3},{value:"Cooperative Perception",id:"cooperative-perception",level:4},{value:"Cooperative Planning",id:"cooperative-planning",level:4},{value:"Collective Functions",id:"collective-functions",level:2},{value:"Characteristics",id:"characteristics-1",level:3},{value:"Examples",id:"examples-1",level:3},{value:"Collective Perception",id:"collective-perception",level:4},{value:"Collective Planning",id:"collective-planning",level:4},{value:"Supportive Functions",id:"supportive-functions",level:2},{value:"Characteristics",id:"characteristics-2",level:3},{value:"Examples",id:"examples-2",level:3},{value:"Traffic Control",id:"traffic-control",level:4},{value:"Function Offloading",id:"function-offloading",level:4},{value:"Key Benefits Across Categories",id:"key-benefits-across-categories",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"connectivity-in-automated-driving",children:"Connectivity in Automated Driving"})}),"\n",(0,o.jsxs)(n.p,{children:["Connectivity plays a pivotal role in automated driving, enabling a multitude of functions that enhance efficiency, safety, and overall functionality. These connectivity-enabled functions can be categorized into ",(0,o.jsx)(n.strong,{children:"Cooperative Functions"}),", ",(0,o.jsx)(n.strong,{children:"Collective Functions"}),", and ",(0,o.jsx)(n.strong,{children:"Supportive Functions"}),". This documentation delves into each category, providing comprehensive insights supported by concepts from the ACDC course material."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"cooperative-functions",children:"Cooperative Functions"}),"\n",(0,o.jsxs)(n.p,{children:["Cooperative functions center around the ",(0,o.jsx)(n.strong,{children:"exchange of data between individual connected entities"}),", enriching each entity's locally available information. Each entity independently integrates the shared data with its own, performing necessary computations in a ",(0,o.jsx)(n.strong,{children:"decentralized"})," manner. This approach enhances the overall system without relying on a central processing unit."]}),"\n",(0,o.jsx)(n.h3,{id:"characteristics",children:"Characteristics"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Decentralized Data Processing"}),": Each entity handles computations independently, ensuring scalability and resilience."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Enhanced Local Awareness"}),": Shared data supplements locally available information, improving perception and planning capabilities."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.h4,{id:"cooperative-perception",children:"Cooperative Perception"}),"\n",(0,o.jsxs)(n.p,{children:["Vehicles share their local ",(0,o.jsx)(n.strong,{children:"environment models"})," with nearby counterparts, enabling the detection of objects that might be ",(0,o.jsx)(n.strong,{children:"occluded"})," or outside their direct line of sight. For instance, if one vehicle detects a pedestrian obscured from another vehicle's view, sharing this information ensures that all vehicles in the vicinity can respond appropriately, thereby enhancing safety and situational awareness."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Example: Cooperative Perception Data Sharing\n\nclass Vehicle:\n    def __init__(self, vehicle_id):\n        self.vehicle_id = vehicle_id\n        self.local_environment = {}\n\n    def detect_objects(self):\n        # Simulate object detection\n        self.local_environment = {\n            'pedestrian': {'position': (10, 15), 'velocity': (0, 0)},\n            'obstacle': {'position': (20, 25), 'velocity': (0, 0)}\n        }\n\n    def share_environment(self):\n        # Share detected objects with nearby vehicles\n        return self.local_environment\n\n    def integrate_shared_data(self, shared_data):\n        # Integrate shared data into local environment\n        for obj, details in shared_data.items():\n            if obj not in self.local_environment:\n                self.local_environment[obj] = details\n\n# Usage\nvehicle_a = Vehicle('A')\nvehicle_b = Vehicle('B')\n\nvehicle_a.detect_objects()\nshared_data = vehicle_a.share_environment()\nvehicle_b.integrate_shared_data(shared_data)\n\nprint(vehicle_b.local_environment)\n"})}),"\n",(0,o.jsx)(n.h4,{id:"cooperative-planning",children:"Cooperative Planning"}),"\n",(0,o.jsxs)(n.p,{children:["Vehicles exchange their ",(0,o.jsx)(n.strong,{children:"planned behaviors"}),", such as lane changes or turns, with nearby vehicles. This facilitates better prediction of other vehicles' actions, allowing for smoother coordination in traffic scenarios like approaching a roundabout. By sharing planned routes, vehicles can reduce uncertainty and prevent potential collisions."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Example: Cooperative Planning\n\nclass Vehicle:\n    def __init__(self, vehicle_id):\n        self.vehicle_id = vehicle_id\n        self.planned_route = []\n\n    def plan_route(self, route):\n        self.planned_route = route\n\n    def share_route(self):\n        return self.planned_route\n\n    def receive_other_route(self, other_route):\n        # Adjust planning based on other vehicles' routes\n        self.planned_route = self.optimize_route(self.planned_route, other_route)\n\n    def optimize_route(self, own_route, other_route):\n        # Simple optimization example\n        if own_route == other_route:\n            own_route.append('Wait')\n        return own_route\n\n# Usage\nvehicle_a = Vehicle('A')\nvehicle_b = Vehicle('B')\n\nvehicle_a.plan_route(['Lane 1', 'Roundabout', 'Lane 2'])\nvehicle_b.plan_route(['Lane 1', 'Roundabout', 'Lane 3'])\n\nroute_a = vehicle_a.share_route()\nroute_b = vehicle_b.share_route()\n\nvehicle_a.receive_other_route(route_b)\nvehicle_b.receive_other_route(route_a)\n\nprint(vehicle_a.planned_route)\nprint(vehicle_b.planned_route)\n"})}),"\n",(0,o.jsx)(n.p,{children:"These cooperative functions significantly improve situational awareness and predictive capabilities, operating effectively without centralized processing systems."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"collective-functions",children:"Collective Functions"}),"\n",(0,o.jsxs)(n.p,{children:["Collective functions involve the ",(0,o.jsx)(n.strong,{children:"aggregation of data from multiple connected entities"})," and its centralized processing, typically on a ",(0,o.jsx)(n.strong,{children:"cloud server"})," or ",(0,o.jsx)(n.strong,{children:"edge cloud server"}),". The central server performs data fusion and computations before distributing the processed results back to the connected entities. Utilizing ",(0,o.jsx)(n.strong,{children:"edge cloud servers"}),", which are situated near data sources, can further reduce communication latency."]}),"\n",(0,o.jsx)(n.h3,{id:"characteristics-1",children:"Characteristics"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Centralized Data Fusion"}),": Data from various sources is combined into a unified representation, ensuring consistency and comprehensiveness."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Efficient Resource Utilization"}),": Centralized servers possess greater computational power, enabling the handling of complex tasks more effectively than individual entities."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"examples-1",children:"Examples"}),"\n",(0,o.jsx)(n.h4,{id:"collective-perception",children:"Collective Perception"}),"\n",(0,o.jsxs)(n.p,{children:["Environment models from individual vehicles are transmitted to a central server, which ",(0,o.jsx)(n.strong,{children:"fuses"})," the data into a comprehensive ",(0,o.jsx)(n.strong,{children:"environment model"}),". This unified model is then disseminated to all relevant vehicles, ensuring consistent data quality and alleviating the computational burden on individual vehicles."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Example: Collective Perception with Central Server\n\nclass CentralServer:\n    def __init__(self):\n        self.comprehensive_environment = {}\n\n    def fuse_data(self, vehicle_data):\n        # Simple data fusion by aggregating object positions\n        for vehicle_id, data in vehicle_data.items():\n            for obj, details in data.items():\n                self.comprehensive_environment.setdefault(obj, []).append(details['position'])\n\n    def distribute_environment(self):\n        return self.comprehensive_environment\n\nclass Vehicle:\n    def __init__(self, vehicle_id):\n        self.vehicle_id = vehicle_id\n        self.local_environment = {}\n\n    def detect_objects(self):\n        # Simulate object detection\n        self.local_environment = {\n            'pedestrian': {'position': (10, 15)},\n            'obstacle': {'position': (20, 25)}\n        }\n\n    def send_data_to_server(self, server):\n        server.fuse_data({self.vehicle_id: self.local_environment})\n\n    def receive_comprehensive_environment(self, comprehensive_env):\n        self.comprehensive_environment = comprehensive_env\n\n# Usage\nserver = CentralServer()\nvehicle_a = Vehicle('A')\nvehicle_b = Vehicle('B')\n\nvehicle_a.detect_objects()\nvehicle_b.detect_objects()\n\nvehicle_a.send_data_to_server(server)\nvehicle_b.send_data_to_server(server)\n\ncomprehensive_env = server.distribute_environment()\n\nvehicle_a.receive_comprehensive_environment(comprehensive_env)\nvehicle_b.receive_comprehensive_environment(comprehensive_env)\n\nprint(vehicle_a.comprehensive_environment)\nprint(vehicle_b.comprehensive_environment)\n"})}),"\n",(0,o.jsx)(n.h4,{id:"collective-planning",children:"Collective Planning"}),"\n",(0,o.jsxs)(n.p,{children:["Vehicles share their intended routes with a central server, which computes ",(0,o.jsx)(n.strong,{children:"optimal trajectories"})," for all vehicles within a specific area. These optimized trajectories are then communicated back to the vehicles for execution, eliminating the need for direct inter-vehicle coordination and achieving global optimization."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Example: Collective Planning with Central Server\n\nclass CentralServer:\n    def __init__(self):\n        self.vehicle_routes = {}\n\n    def collect_routes(self, vehicle_id, route):\n        self.vehicle_routes[vehicle_id] = route\n\n    def compute_optimal_trajectories(self):\n        # Simple optimization: avoid route conflicts\n        optimized_routes = {}\n        for vehicle_id, route in self.vehicle_routes.items():\n            if 'Conflict Point' in route:\n                optimized_routes[vehicle_id] = [step for step in route if step != 'Conflict Point']\n                optimized_routes[vehicle_id].append('Wait')\n            else:\n                optimized_routes[vehicle_id] = route\n        return optimized_routes\n\n    def distribute_trajectories(self, optimized_routes):\n        return optimized_routes\n\nclass Vehicle:\n    def __init__(self, vehicle_id):\n        self.vehicle_id = vehicle_id\n        self.route = []\n        self.optimized_route = []\n\n    def plan_route(self, route):\n        self.route = route\n\n    def send_route_to_server(self, server):\n        server.collect_routes(self.vehicle_id, self.route)\n\n    def receive_optimized_route(self, optimized_route):\n        self.optimized_route = optimized_route\n\n# Usage\nserver = CentralServer()\nvehicle_a = Vehicle('A')\nvehicle_b = Vehicle('B')\n\nvehicle_a.plan_route(['Start', 'Conflict Point', 'End'])\nvehicle_b.plan_route(['Start', 'Conflict Point', 'End'])\n\nvehicle_a.send_route_to_server(server)\nvehicle_b.send_route_to_server(server)\n\noptimized_routes = server.compute_optimal_trajectories()\ndistributed_routes = server.distribute_trajectories(optimized_routes)\n\nvehicle_a.receive_optimized_route(distributed_routes['A'])\nvehicle_b.receive_optimized_route(distributed_routes['B'])\n\nprint(vehicle_a.optimized_route)\nprint(vehicle_b.optimized_route)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The centralized nature of collective functions enables more ",(0,o.jsx)(n.strong,{children:"powerful and consistent computation"}),", effectively offloading processing tasks from individual vehicles and ensuring harmonized operations across the fleet."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"supportive-functions",children:"Supportive Functions"}),"\n",(0,o.jsxs)(n.p,{children:["Supportive functions depend on ",(0,o.jsx)(n.strong,{children:"external infrastructure"})," to provide connected entities with data, computational resources, or services. This category encompasses tasks that are computationally intensive or resource-heavy for individual vehicles to handle independently."]}),"\n",(0,o.jsx)(n.h3,{id:"characteristics-2",children:"Characteristics"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"External Support"}),": Infrastructure components such as servers or traffic management systems offer additional resources or information to vehicles."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Scalability"}),": External servers can manage complex tasks that exceed the computational capacities of individual vehicles, facilitating scalability."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"examples-2",children:"Examples"}),"\n",(0,o.jsx)(n.h4,{id:"traffic-control",children:"Traffic Control"}),"\n",(0,o.jsxs)(n.p,{children:["Connected traffic systems, including ",(0,o.jsx)(n.strong,{children:"traffic lights"})," and ",(0,o.jsx)(n.strong,{children:"digital speed limit signs"}),", communicate their current and projected states to road users. Vehicles utilize this information to plan ",(0,o.jsx)(n.strong,{children:"optimized behaviors"}),", such as adjusting speed to minimize stops, leading to smoother and more efficient traffic flow. This functionality is already operational in certain urban areas, contributing to improved traffic management."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Example: Traffic Control Integration\n\nclass TrafficLight:\n    def __init__(self, location):\n        self.location = location\n        self.state = 'Red'\n\n    def update_state(self, new_state):\n        self.state = new_state\n\n    def broadcast_state(self):\n        return {'location': self.location, 'state': self.state}\n\nclass Vehicle:\n    def __init__(self, vehicle_id):\n        self.vehicle_id = vehicle_id\n        self.speed = 60  # km/h\n\n    def receive_traffic_info(self, traffic_info):\n        for info in traffic_info:\n            if info['state'] == 'Red':\n                self.adjust_speed(0)\n            elif info['state'] == 'Yellow':\n                self.adjust_speed(30)\n            elif info['state'] == 'Green':\n                self.adjust_speed(60)\n\n    def adjust_speed(self, new_speed):\n        self.speed = new_speed\n        print(f\"Vehicle {self.vehicle_id} speed adjusted to {self.speed} km/h\")\n\n# Usage\ntraffic_light = TrafficLight('Main St & 1st Ave')\nvehicle = Vehicle('V1')\n\n# Traffic light changes state\ntraffic_light.update_state('Red')\ntraffic_info = [traffic_light.broadcast_state()]\n\nvehicle.receive_traffic_info(traffic_info)\n\ntraffic_light.update_state('Green')\ntraffic_info = [traffic_light.broadcast_state()]\n\nvehicle.receive_traffic_info(traffic_info)\n"})}),"\n",(0,o.jsx)(n.h4,{id:"function-offloading",children:"Function Offloading"}),"\n",(0,o.jsxs)(n.p,{children:["Vehicles transmit their ",(0,o.jsx)(n.strong,{children:"sensor data"}),"\u2014such as camera feeds and LiDAR data\u2014to external servers, where advanced ",(0,o.jsx)(n.strong,{children:"object detection"})," or ",(0,o.jsx)(n.strong,{children:"path planning algorithms"})," are executed. These external servers can leverage large neural networks and higher energy resources, which are often impractical for onboard vehicle systems. For example, a vehicle might send real-time LiDAR data to an edge cloud server for object recognition, receiving the results to inform its decision-making processes."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Example: Function Offloading to External Server\n\nimport requests\nimport json\n\nclass Vehicle:\n    def __init__(self, vehicle_id):\n        self.vehicle_id = vehicle_id\n        self.sensor_data = {}\n        self.detected_objects = {}\n\n    def collect_sensor_data(self):\n        # Simulate sensor data collection\n        self.sensor_data = {\n            'LiDAR': {'points': [(1,2), (3,4), (5,6)]},\n            'Camera': {'images': ['image1.png', 'image2.png']}\n        }\n\n    def send_data_to_server(self, server_url):\n        response = requests.post(server_url, json=self.sensor_data)\n        if response.status_code == 200:\n            self.detected_objects = response.json()\n            self.process_detected_objects()\n\n    def process_detected_objects(self):\n        # Implement decision-making based on detected objects\n        print(f\"Vehicle {self.vehicle_id} detected objects: {self.detected_objects}\")\n\n# Simulated external server endpoint\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/process_sensor_data', methods=['POST'])\ndef process_sensor_data():\n    data = request.get_json()\n    # Simulate object detection\n    detected = {'objects': ['pedestrian', 'vehicle']}\n    return jsonify(detected), 200\n\n# To run the server, uncomment the following lines:\n# if __name__ == '__main__':\n#     app.run(debug=True)\n\n# Usage\n# Note: This requires the Flask server to be running separately.\n# vehicle = Vehicle('V1')\n# vehicle.collect_sensor_data()\n# vehicle.send_data_to_server('http://localhost:5000/process_sensor_data')\n"})}),"\n",(0,o.jsx)(n.p,{children:"Supportive functions exemplify the extension of computational and informational capabilities of connected vehicles through external resources, enabling more sophisticated operations without overburdening onboard systems."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"key-benefits-across-categories",children:"Key Benefits Across Categories"}),"\n",(0,o.jsx)(n.p,{children:"Each category of connectivity-enabled functions uniquely contributes to the advancement of automated and connected driving. Collectively, they offer the following benefits:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Increased Safety"}),": Data sharing and centralized or supportive computation mitigate risks associated with limited perception and delayed decision-making."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Enhanced Traffic Efficiency"}),": Optimized trajectories and real-time communication alleviate congestion and improve traffic flow."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Improved Vehicle Coordination"}),": Cooperative and collective planning ensure smoother and more predictable interactions between vehicles."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Scalability and Flexibility"}),": Supportive functions allow for complex computations and resource offloading, expanding vehicle capabilities without necessitating additional onboard hardware."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsxs)(n.p,{children:["The classification of connectivity-enabled functions into ",(0,o.jsx)(n.strong,{children:"Cooperative"}),", ",(0,o.jsx)(n.strong,{children:"Collective"}),", and ",(0,o.jsx)(n.strong,{children:"Supportive"})," highlights the diverse methodologies through which connected entities collaborate to achieve efficient, safe, and intelligent mobility systems. Leveraging these functions addresses the challenges inherent in automated and connected driving, paving the way for significant advancements in transportation technology and infrastructure."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(6540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);