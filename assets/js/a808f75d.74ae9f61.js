"use strict";(self.webpackChunkacd=self.webpackChunkacd||[]).push([[4054],{9022:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"cpp/Introduction/print_text","title":"Output for Text","description":"---","source":"@site/docs/cpp/Introduction/03_print_text.md","sourceDirName":"cpp/Introduction","slug":"/cpp/Introduction/print_text","permalink":"/Autonomous-Connected-Driving/docs/cpp/Introduction/print_text","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cpp/Introduction/03_print_text.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"cppSidebar","previous":{"title":"Statements","permalink":"/Autonomous-Connected-Driving/docs/cpp/Introduction/statement"},"next":{"title":"Output for Numbers","permalink":"/Autonomous-Connected-Driving/docs/cpp/Introduction/print_numbers"}}');var i=s(4848),o=s(8453);const l={},r="Output for Text",c={},a=[{value:"Introduction",id:"introduction",level:2},{value:"1. Basics of C++ Output: <code>cout</code>",id:"1-basics-of-c-output-cout",level:3},{value:"Example: Simple Output",id:"example-simple-output",level:2},{value:"2. Adding Multiple Outputs",id:"2-adding-multiple-outputs",level:3},{value:"Example: Sequential Outputs",id:"example-sequential-outputs",level:2},{value:"3. Use Case in Autonomous Driving: Logging System Events",id:"3-use-case-in-autonomous-driving-logging-system-events",level:3},{value:"Example: Outputting System Status",id:"example-outputting-system-status",level:2},{value:"4. Improving Readability with Multiple Outputs",id:"4-improving-readability-with-multiple-outputs",level:3},{value:"Example: Separate Outputs",id:"example-separate-outputs",level:2},{value:"5. Outputting Variable Values",id:"5-outputting-variable-values",level:3},{value:"Example: Outputting Sensor Data",id:"example-outputting-sensor-data",level:2},{value:"6. Advanced Example: Real-Time Logging in Autonomous Systems",id:"6-advanced-example-real-time-logging-in-autonomous-systems",level:3},{value:"Example: Real-Time Logs",id:"example-real-time-logs",level:2},{value:"7. Common Errors with <code>cout</code>",id:"7-common-errors-with-cout",level:3},{value:"8. Practical Tips for Using <code>cout</code> in Autonomous Driving Applications",id:"8-practical-tips-for-using-cout-in-autonomous-driving-applications",level:3},{value:"Conclusion",id:"conclusion",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"output-for-text",children:"Output for Text"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["In C++, the ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"cout"})})," object, in combination with the ",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"<<"})," operator"]}),", is used to output text and values to the console. This fundamental feature plays a significant role in debugging, logging, and monitoring critical components in ",(0,i.jsx)(n.strong,{children:"autonomous driving applications"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This tutorial explains the usage of ",(0,i.jsx)(n.code,{children:"cout"})," for printing text, with examples relevant to autonomous systems, such as sensor status updates, vehicle initialization logs, and real-time outputs."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"1-basics-of-c-output-cout",children:["1. Basics of C++ Output: ",(0,i.jsx)(n.code,{children:"cout"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"cout"})," object is a part of the ",(0,i.jsx)(n.code,{children:"<iostream>"})," library and is used for displaying messages or values on the console."]}),"\n",(0,i.jsx)(n.h2,{id:"example-simple-output",children:"Example: Simple Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << "Hello Autonomous World!";\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Hello Autonomous World!\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Explanation:"})," The ",(0,i.jsx)(n.code,{children:"<<"})," operator is used to insert the string ",(0,i.jsx)(n.code,{children:'"Hello Autonomous World!"'})," into the ",(0,i.jsx)(n.code,{children:"cout"})," stream, which then displays it on the console."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"2-adding-multiple-outputs",children:"2. Adding Multiple Outputs"}),"\n",(0,i.jsxs)(n.p,{children:["You can use multiple ",(0,i.jsx)(n.code,{children:"cout"})," objects in a program. Each ",(0,i.jsx)(n.code,{children:"cout"})," statement prints text or values sequentially."]}),"\n",(0,i.jsx)(n.h2,{id:"example-sequential-outputs",children:"Example: Sequential Outputs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << "Starting Autonomous Vehicle System...";\n    cout << "Sensors are being initialized.";\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Starting Autonomous Vehicle System...Sensors are being initialized.\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," The output appears on the same line because ",(0,i.jsx)(n.code,{children:"cout"})," does not add a new line by default."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"3-use-case-in-autonomous-driving-logging-system-events",children:"3. Use Case in Autonomous Driving: Logging System Events"}),"\n",(0,i.jsx)(n.p,{children:"In autonomous driving, logging system events during initialization or operation is critical for debugging and system health monitoring."}),"\n",(0,i.jsx)(n.h2,{id:"example-outputting-system-status",children:"Example: Outputting System Status"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << "Vehicle system initializing...";\n    cout << "Activating LiDAR sensors...";\n    cout << "System ready for operation.";\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Vehicle system initializing...Activating LiDAR sensors...System ready for operation.\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This output demonstrates the lack of new lines between messages. A more readable format is achieved by adding new lines, as explained in the next section."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"4-improving-readability-with-multiple-outputs",children:"4. Improving Readability with Multiple Outputs"}),"\n",(0,i.jsx)(n.p,{children:"To improve readability, especially for monitoring system logs in autonomous driving applications, you can separate outputs into multiple statements."}),"\n",(0,i.jsx)(n.h2,{id:"example-separate-outputs",children:"Example: Separate Outputs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << "Vehicle system initializing...\\n";\n    cout << "Activating LiDAR sensors...\\n";\n    cout << "System ready for operation.\\n";\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Vehicle system initializing...\nActivating LiDAR sensors...\nSystem ready for operation.\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"\\n"})})," adds a new line after each message, making the output easier to read."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"5-outputting-variable-values",children:"5. Outputting Variable Values"}),"\n",(0,i.jsx)(n.p,{children:"In real-world applications, you may need to output variable values, such as sensor readings or vehicle speed."}),"\n",(0,i.jsx)(n.h2,{id:"example-outputting-sensor-data",children:"Example: Outputting Sensor Data"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nusing namespace std;\n\nint main() {\n    int speed = 80;  // Vehicle speed in km/h\n    float distance = 12.5;  // Distance to an obstacle in meters\n\n    cout << "Current speed: " << speed << " km/h\\n";\n    cout << "Distance to obstacle: " << distance << " meters\\n";\n\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Current speed: 80 km/h\nDistance to obstacle: 12.5 meters\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"<<"})," operator allows chaining multiple values and strings in a single ",(0,i.jsx)(n.code,{children:"cout"})," statement."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"6-advanced-example-real-time-logging-in-autonomous-systems",children:"6. Advanced Example: Real-Time Logging in Autonomous Systems"}),"\n",(0,i.jsx)(n.p,{children:"In an autonomous driving system, real-time logging of system events and sensor data is essential."}),"\n",(0,i.jsx)(n.h2,{id:"example-real-time-logs",children:"Example: Real-Time Logs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string status = "Active";  // Vehicle system status\n    int obstacleCount = 3;     // Number of obstacles detected\n\n    cout << "System Status: " << status << "\\n";\n    cout << "Number of obstacles detected: " << obstacleCount << "\\n";\n\n    for (int i = 1; i <= obstacleCount; ++i) {\n        cout << "Processing obstacle " << i << "...\\n";\n    }\n\n    cout << "All obstacles processed successfully.\\n";\n\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"System Status: Active\nNumber of obstacles detected: 3\nProcessing obstacle 1...\nProcessing obstacle 2...\nProcessing obstacle 3...\nAll obstacles processed successfully.\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"7-common-errors-with-cout",children:["7. Common Errors with ",(0,i.jsx)(n.code,{children:"cout"})]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Missing Semicolon:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error:"})," Omitting the semicolon at the end of a ",(0,i.jsx)(n.code,{children:"cout"})," statement."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'cout << "Hello World!"  // Missing semicolon\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Mismatched Data Types:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Error:"})," Trying to print unsupported data types without conversion."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Solution:"})," Use proper type casting or conversion functions if needed."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"8-practical-tips-for-using-cout-in-autonomous-driving-applications",children:["8. Practical Tips for Using ",(0,i.jsx)(n.code,{children:"cout"})," in Autonomous Driving Applications"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use Meaningful Messages:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Always use descriptive messages to make logs informative."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Format Outputs:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add new lines (",(0,i.jsx)(n.code,{children:"\\n"}),") or tab characters (",(0,i.jsx)(n.code,{children:"\\t"}),") to format logs for readability."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Avoid Clutter:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Only log relevant information, especially in performance-critical systems."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Debugging with ",(0,i.jsx)(n.code,{children:"cout"}),":"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"cout"})," to debug real-time sensor values, control signals, or state changes."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"cout"})," object is a versatile tool for printing text and values in C++. In autonomous driving applications, it is invaluable for logging events, monitoring system status, and debugging. By mastering the basics of ",(0,i.jsx)(n.code,{children:"cout"})," and enhancing output readability with proper formatting, you can create clear and functional output systems for your autonomous vehicle projects."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var t=s(6540);const i={},o=t.createContext(i);function l(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);