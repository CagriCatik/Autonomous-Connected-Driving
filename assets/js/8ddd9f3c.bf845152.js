"use strict";(self.webpackChunkacd=self.webpackChunkacd||[]).push([[32],{6856:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"task/intro/ROS-Nodes-in-Cpp","title":"ROS Nodes in C++","description":"ROS1","source":"@site/docs/task/01_intro/04_ROS-Nodes-in-Cpp.md","sourceDirName":"task/01_intro","slug":"/task/intro/ROS-Nodes-in-Cpp","permalink":"/Autonomous-Connected-Driving/docs/task/intro/ROS-Nodes-in-Cpp","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/task/01_intro/04_ROS-Nodes-in-Cpp.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"taskSidebar","previous":{"title":"ROS GUI Tools","permalink":"/Autonomous-Connected-Driving/docs/task/intro/ROS-GUI-Tools"},"next":{"title":"ROS Bags","permalink":"/Autonomous-Connected-Driving/docs/task/intro/ROS-Bags"}}');var r=s(4848),l=s(8453);const c={},o="ROS Nodes in C++",t={},a=[{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"Introduction to C++",id:"introduction-to-c",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Key Differences Between C++ and Other Languages",id:"key-differences-between-c-and-other-languages",level:3},{value:"Practical C++ Examples from <code>vehicle_controller_node.cpp</code>",id:"practical-c-examples-from-vehicle_controller_nodecpp",level:3},{value:"Recommendation",id:"recommendation",level:3},{value:"Code Elements of a ROS Node in C++",id:"code-elements-of-a-ros-node-in-c",level:2},{value:"Code Outside Functions",id:"code-outside-functions",level:3},{value:"Includes",id:"includes",level:4},{value:"Publisher and Subscriber Objects",id:"publisher-and-subscriber-objects",level:4},{value:"Vehicle Controller Object",id:"vehicle-controller-object",level:4},{value:"Callback Function of the Subscriber",id:"callback-function-of-the-subscriber",level:3},{value:"Execution of Control Algorithms via VehicleController Interface",id:"execution-of-control-algorithms-via-vehiclecontroller-interface",level:4},{value:"Conversion of Native C++ Variables to ROS Messages",id:"conversion-of-native-c-variables-to-ros-messages",level:4},{value:"Publish Commands to Topic",id:"publish-commands-to-topic",level:4},{value:"Main Function",id:"main-function",level:3},{value:"Initialize ROS Node",id:"initialize-ros-node",level:4},{value:"Access the ROS Parameter Server",id:"access-the-ros-parameter-server",level:4},{value:"Log Messages",id:"log-messages",level:4},{value:"Allocate Dynamic Memory",id:"allocate-dynamic-memory",level:4},{value:"Configure Publisher and Subscriber",id:"configure-publisher-and-subscriber",level:4},{value:"Event Loop",id:"event-loop",level:4},{value:"Practical Tasks",id:"practical-tasks",level:2},{value:"Task 1: Adjust the <code>ros::spin()</code> Event Loop",id:"task-1-adjust-the-rosspin-event-loop",level:3},{value:"Task 2: Enhance Logging in the Callback Function",id:"task-2-enhance-logging-in-the-callback-function",level:3},{value:"Building the Source Code",id:"building-the-source-code",level:3},{value:"Wrap-up",id:"wrap-up",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ros-nodes-in-c",children:"ROS Nodes in C++"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://img.shields.io/badge/ROS1-blue",alt:"ROS1"})}),"\n",(0,r.jsxs)(n.p,{children:["This tutorial delves into ",(0,r.jsx)(n.strong,{children:"implementing your own ROS node in C++"}),", building upon the foundational knowledge from the ",(0,r.jsx)(n.a,{href:"https://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29",children:"official ROS tutorial on writing a simple publisher and subscriber"}),". By the end of this exercise, you will have a solid understanding of creating, configuring, and managing ROS nodes using C++."]}),"\n",(0,r.jsx)(n.h2,{id:"learning-objectives",children:"Learning Objectives"}),"\n",(0,r.jsx)(n.p,{children:"In this exercise, you will learn to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Grasp fundamental concepts of C++ relevant to ROS development."}),"\n",(0,r.jsxs)(n.li,{children:["Set up a ROS node with necessary includes, initialization, and ",(0,r.jsx)(n.code,{children:"NodeHandle"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Utilize ROS subscribers, publishers, and callback functions effectively."}),"\n",(0,r.jsx)(n.li,{children:"Access and manipulate the ROS parameter server."}),"\n",(0,r.jsx)(n.li,{children:"Implement ROS logging functionalities."}),"\n",(0,r.jsx)(n.li,{children:"Understand the concept and mechanics behind ROS spinning."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"introduction-to-c",children:"Introduction to C++"}),"\n",(0,r.jsx)(n.p,{children:"A robust understanding of a high-level programming language is essential before diving into this tutorial. While hands-on programming in C++ will be limited to small tasks within this exercise, comprehending the underlying concepts is crucial."}),"\n",(0,r.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Basic Programming Knowledge:"})," Familiarity with programming concepts is necessary."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"C++ Familiarity:"})," Although deep expertise in C++ isn't mandatory, understanding its syntax and core principles is beneficial."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"If you're new to C++, consider exploring the following resources:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"External Documentation:"})," ",(0,r.jsx)(n.a,{href:"https://github.com/ika-rwth-aachen/acdc/wiki/External-Documentation",children:"ACDC Wiki - External Documentation"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"C++ for Python Programmers:"})," ",(0,r.jsx)(n.a,{href:"https://blue.cs.sonoma.edu/~tiawatts/UsefulStuff/C++ForPythonProgrammers.pdf",children:"C++ Tutorial for Python Programmers"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"key-differences-between-c-and-other-languages",children:"Key Differences Between C++ and Other Languages"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pointer Variables:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Declaration:"})," Use the ",(0,r.jsx)(n.code,{children:"*"})," operator to declare a pointer variable.","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"int *ptr;\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dereferencing:"})," Use the ",(0,r.jsx)(n.code,{children:"*"})," operator to access the value at the memory address pointed to by the pointer.","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"int value = *ptr;\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Management:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dynamic Allocation:"})," Use ",(0,r.jsx)(n.code,{children:"new"})," to allocate memory and ",(0,r.jsx)(n.code,{children:"delete"})," to deallocate.","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"int *ptr = new int;\n// ... use ptr ...\ndelete ptr;\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modern Alternatives:"})," Utilize smart pointers like ",(0,r.jsx)(n.code,{children:"std::unique_ptr"})," or ",(0,r.jsx)(n.code,{children:"std::shared_ptr"})," to manage memory automatically."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"practical-c-examples-from-vehicle_controller_nodecpp",children:["Practical C++ Examples from ",(0,r.jsx)(n.code,{children:"vehicle_controller_node.cpp"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "VehicleController.h"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Includes code from another file, similar to importing a package in Python."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"/**\n * @brief Callback function that is automatically triggered when a new Lidar scan is available\n * @param msg A pointer to message object that contains the new Lidar scan\n */\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," A multi-line comment formatted for Doxygen, enabling automatic generation of code documentation."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"distances[i] = msg->ranges[i];\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[]"})," operator accesses array elements."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"->"})," operator accesses members of a class instance via a pointer."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"ros::spin();\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"})," The ",(0,r.jsx)(n.code,{children:"spin()"})," function, defined within the ",(0,r.jsx)(n.code,{children:"ros"})," namespace, keeps the node alive and responsive to callbacks."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"recommendation",children:"Recommendation"}),"\n",(0,r.jsx)(n.p,{children:"For those intending to develop C++ ROS nodes beyond academic exercises, it's highly recommended to learn C++ comprehensively to leverage its full potential within ROS projects."}),"\n",(0,r.jsx)(n.h2,{id:"code-elements-of-a-ros-node-in-c",children:"Code Elements of a ROS Node in C++"}),"\n",(0,r.jsxs)(n.p,{children:["This section examines the ROS-specific components of the vehicle controller node implemented in ",(0,r.jsx)(n.code,{children:"~/ws/catkin_workspace/src/workshops/section_1/racing/src/vehicle_controller_node.cpp"}),". Open this file in your preferred editor and explore the highlighted code snippets to understand their roles and interactions."]}),"\n",(0,r.jsx)(n.h3,{id:"code-outside-functions",children:"Code Outside Functions"}),"\n",(0,r.jsx)(n.h4,{id:"includes",children:"Includes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"#include <ros/ros.h>\n#include <sensor_msgs/LaserScan.h>\n#include <geometry_msgs/Twist.h>\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ros/ros.h"}),": Provides access to common ROS functionalities."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sensor_msgs/LaserScan.h"})," & ",(0,r.jsx)(n.code,{children:"geometry_msgs/Twist.h"}),": Define message types for Lidar scans and velocity commands, respectively."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"publisher-and-subscriber-objects",children:"Publisher and Subscriber Objects"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"ros::Publisher *publisher_actions = nullptr;\nros::Subscriber *subscriber_sensor_data = nullptr;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Declares pointer variables to ",(0,r.jsx)(n.code,{children:"ros::Publisher"})," and ",(0,r.jsx)(n.code,{children:"ros::Subscriber"})," objects."]}),"\n",(0,r.jsxs)(n.li,{children:["Initialized to ",(0,r.jsx)(n.code,{children:"nullptr"}),", they will later point to dynamically allocated memory."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"vehicle-controller-object",children:"Vehicle Controller Object"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"VehicleController *vehicle_controller = nullptr;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Declares a pointer to a ",(0,r.jsx)(n.code,{children:"VehicleController"})," class object."]}),"\n",(0,r.jsx)(n.li,{children:"The control algorithm resides within this class, promoting modularity and reusability."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"callback-function-of-the-subscriber",children:"Callback Function of the Subscriber"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"/**\n * @brief Callback function that is automatically triggered when a new Lidar scan is available\n * @param msg A pointer to message object that contains the new Lidar scan\n */\nvoid callbackLaserSensor(const sensor_msgs::LaserScanPtr &msg) {\n  // function body removed\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Custom function executed upon receiving new Lidar scan data."}),"\n",(0,r.jsx)(n.li,{children:"Requires correct topic subscription and callback registration to function as intended."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"execution-of-control-algorithms-via-vehiclecontroller-interface",children:"Execution of Control Algorithms via VehicleController Interface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Interface calls to the VehicleController instance\nvehicle_controller->overwriteLidarDistances(distances);\nvehicle_controller->computeTargetValues();\ndouble linear_velocity = vehicle_controller->getTargetVelocity();\ndouble steering_angle = vehicle_controller->getTargetSteeringAngle();\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Interacts with the ",(0,r.jsx)(n.code,{children:"VehicleController"})," object to process sensor data and compute actuator commands."]}),"\n",(0,r.jsxs)(n.li,{children:["Promotes separation of concerns:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ROS-Specific Code:"})," Managed in ",(0,r.jsx)(n.code,{children:"vehicle_controller_node.cpp"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Control Algorithm:"})," Encapsulated within ",(0,r.jsx)(n.code,{children:"VehicleController.h"})," / ",(0,r.jsx)(n.code,{children:"VehicleController.cpp"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"conversion-of-native-c-variables-to-ros-messages",children:"Conversion of Native C++ Variables to ROS Messages"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Convert local variables to a geometry_msgs::Twist message for publishing.\ngeometry_msgs::Twist new_action;\ngeometry_msgs::Vector3 steering;\ngeometry_msgs::Vector3 velocity;\nsteering.z = steering_angle;\nvelocity.x = linear_velocity;\nnew_action.linear = velocity;\nnew_action.angular = steering;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Transforms computed velocity and steering values into a ",(0,r.jsx)(n.code,{children:"geometry_msgs::Twist"})," message format for publishing."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"publish-commands-to-topic",children:"Publish Commands to Topic"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Publish the newly computed actuator command to the topic\npublisher_actions->publish(new_action);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Utilizes the ",(0,r.jsx)(n.code,{children:"publisher_actions"})," object to send the ",(0,r.jsx)(n.code,{children:"new_action"})," message to the designated topic."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"main-function",children:"Main Function"}),"\n",(0,r.jsx)(n.h4,{id:"initialize-ros-node",children:"Initialize ROS Node"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'ros::init(argc, argv, "vehicle_controller");\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Initializes the ROS node named ",(0,r.jsx)(n.code,{children:'"vehicle_controller"'}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Must be called before any other ROS functionalities."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"ros::NodeHandle node_handle;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NodeHandle"})," serves as the primary interface for communicating with the ROS system."]}),"\n",(0,r.jsx)(n.li,{children:"Manages subscriptions, publications, and parameter interactions."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"access-the-ros-parameter-server",children:"Access the ROS Parameter Server"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'// Declare local variables for subscribe and publish topics\nstd::string subscribe_topic_sensors;\nstd::string publish_topic_actuators;\n\n// Write publish and subscribe topics from parameter server into local variables\nnode_handle.getParam("vehicle/sensor_topic", subscribe_topic_sensors);\nnode_handle.getParam("vehicle/actuator_topic", publish_topic_actuators);\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Retrieves topic names from the ROS parameter server, allowing dynamic configuration of communication channels."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"log-messages",children:"Log Messages"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'ROS_INFO("Vehicle controller subscribes to: %s", subscribe_topic_sensors.c_str());\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Outputs informative log messages to the terminal or ",(0,r.jsx)(n.code,{children:"rqt_console"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Facilitates debugging and monitoring by displaying runtime information."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"allocate-dynamic-memory",children:"Allocate Dynamic Memory"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Initialize / allocate dynamic memory\nvehicle_controller = new VehicleController;\nsubscriber_sensor_data = new ros::Subscriber;\npublisher_actions = new ros::Publisher;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Allocates memory for the ",(0,r.jsx)(n.code,{children:"VehicleController"}),", ",(0,r.jsx)(n.code,{children:"Subscriber"}),", and ",(0,r.jsx)(n.code,{children:"Publisher"})," objects."]}),"\n",(0,r.jsx)(n.li,{children:"Ensures that these objects are properly instantiated before use."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"configure-publisher-and-subscriber",children:"Configure Publisher and Subscriber"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Connect subscriber and publisher to their respective topics and callback function\n*subscriber_sensor_data = node_handle.subscribe(subscribe_topic_sensors, 10, callbackLaserSensor);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Subscribes to the sensor topic with a queue size of 10."}),"\n",(0,r.jsxs)(n.li,{children:["Registers ",(0,r.jsx)(n.code,{children:"callbackLaserSensor"})," as the callback function for incoming messages."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"*publisher_actions = node_handle.advertise<geometry_msgs::Twist>(publish_topic_actuators, 10);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Advertises a publisher on the actuator topic with a message queue size of 10."}),"\n",(0,r.jsxs)(n.li,{children:["Enables the node to publish ",(0,r.jsx)(n.code,{children:"geometry_msgs::Twist"})," messages to control actuators."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"event-loop",children:"Event Loop"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Enter a loop to keep the node running while looking for messages on the subscribed topic [...]\nros::spin();\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Enters an infinite loop, processing callbacks as messages arrive."}),"\n",(0,r.jsxs)(n.li,{children:["Ensures the node remains active and responsive until terminated manually (e.g., via ",(0,r.jsx)("kbd",{children:"Ctrl"}),"+",(0,r.jsx)("kbd",{children:"C"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"practical-tasks",children:"Practical Tasks"}),"\n",(0,r.jsxs)(n.h3,{id:"task-1-adjust-the-rosspin-event-loop",children:["Task 1: Adjust the ",(0,r.jsx)(n.code,{children:"ros::spin()"})," Event Loop"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Objective:"})," Modify the event loop in the ",(0,r.jsx)(n.code,{children:"main"})," function of ",(0,r.jsx)(n.code,{children:"vehicle_controller_node.cpp"})," to process incoming messages every ",(0,r.jsx)(n.strong,{children:"20ms"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Steps:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Open ",(0,r.jsx)(n.code,{children:"vehicle_controller_node.cpp"}),":"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Locate the ",(0,r.jsx)(n.code,{children:"ros::spin();"})," statement within the ",(0,r.jsx)(n.code,{children:"main"})," function."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Replace ",(0,r.jsx)(n.code,{children:"ros::spin()"})," with a Custom Loop:"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Implement a ",(0,r.jsx)(n.code,{children:"while"})," loop that calls ",(0,r.jsx)(n.code,{children:"ros::spinOnce()"})," and sleeps for 20ms."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Implement the Loop Using ",(0,r.jsx)(n.code,{children:"ros::Rate"}),":"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Utilize ",(0,r.jsx)(n.code,{children:"ros::Rate"})," to maintain a consistent loop rate."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Sample Implementation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Define a loop rate of 50 Hz (20ms)\nros::Rate loop_rate(50);\n\nwhile (ros::ok()) {\n    ros::spinOnce(); // Process incoming messages\n    loop_rate.sleep(); // Sleep to maintain loop rate\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"ros::Rate loop_rate(50);"}),":"]})," Sets the loop to run at 50 Hz, corresponding to 20ms intervals."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"ros::spinOnce();"}),":"]})," Processes any incoming messages and invokes callbacks."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"loop_rate.sleep();"}),":"]})," Sleeps for the necessary duration to maintain the desired loop rate."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Control Over Loop Frequency:"})," Allows for precise timing of message processing."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flexibility:"})," Enables additional operations within the loop if needed in the future."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"task-2-enhance-logging-in-the-callback-function",children:"Task 2: Enhance Logging in the Callback Function"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Objective:"})," Improve the ",(0,r.jsx)(n.code,{children:"callbackLaserSensor"})," function in ",(0,r.jsx)(n.code,{children:"vehicle_controller_node.cpp"})," by adding log messages that indicate when a message is received and display the measured Lidar distances."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Steps:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Open ",(0,r.jsx)(n.code,{children:"vehicle_controller_node.cpp"}),":"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Navigate to the ",(0,r.jsx)(n.code,{children:"callbackLaserSensor"})," function."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Add Logging Statements:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Insert ",(0,r.jsx)(n.code,{children:"ROS_INFO"})," statements to log message reception and Lidar distances."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Sample Implementation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'void callbackLaserSensor(const sensor_msgs::LaserScanPtr &msg) {\n    ROS_INFO("Received a new Lidar scan.");\n\n    // Assuming there are five Lidar measurements\n    ROS_INFO("Lidar Distances:");\n    for (size_t i = 0; i < 5; ++i) {\n        ROS_INFO("Distance %zu: %.2f meters", i, msg->ranges[i]);\n    }\n\n    // Existing processing code...\n    distances[i] = msg->ranges[i];\n    // ...\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:'ROS_INFO("Received a new Lidar scan.");'}),":"]})," Logs the reception of a new message."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Loop Logging Distances:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Iterates through the first five Lidar measurements."}),"\n",(0,r.jsx)(n.li,{children:"Logs each distance with its index and value in meters."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Adjusting the Number of Measurements:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Ensure that the loop does not exceed the actual number of measurements in ",(0,r.jsx)(n.code,{children:"msg->ranges"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Formatting:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"%.2f"})," formats the distance to two decimal places for readability."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"%zu"})," is used for ",(0,r.jsx)(n.code,{children:"size_t"})," indices."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"building-the-source-code",children:"Building the Source Code"}),"\n",(0,r.jsx)(n.p,{children:"After making changes to the source files, remember to:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Save Your Changes:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure all modified files are saved in your editor."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Build the Workspace:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Open a terminal and navigate to your catkin workspace."}),"\n",(0,r.jsxs)(n.li,{children:["Execute the build command:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"catkin build\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Ensure there are no compilation errors before proceeding."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"wrap-up",children:"Wrap-up"}),"\n",(0,r.jsx)(n.p,{children:"In this chapter, you have gained foundational knowledge and practical skills essential for developing ROS nodes in C++. Here's a summary of what you've accomplished:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"C++ Fundamentals for ROS:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Understood key differences between C++ and other programming languages."}),"\n",(0,r.jsx)(n.li,{children:"Explored practical C++ code snippets relevant to ROS development."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Setting Up a ROS Node:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Included necessary headers and initialized the node."}),"\n",(0,r.jsxs)(n.li,{children:["Utilized ",(0,r.jsx)(n.code,{children:"NodeHandle"})," for interacting with the ROS system."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"ROS Publishers and Subscribers:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Configured publishers and subscribers to communicate via ROS topics."}),"\n",(0,r.jsx)(n.li,{children:"Implemented callback functions to handle incoming messages."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"ROS Parameter Server:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Accessed and utilized parameters from the ROS parameter server for dynamic configuration."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Logging Mechanisms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Enhanced logging within callback functions to facilitate debugging and monitoring."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Event Loop Management:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Modified the ROS spinning mechanism to control the frequency of message processing."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"By mastering these concepts, you are well-equipped to develop more complex and efficient ROS nodes in C++, catering to both beginner and advanced applications within the ROS ecosystem."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var i=s(6540);const r={},l=i.createContext(r);function c(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);