"use strict";(self.webpackChunkacd=self.webpackChunkacd||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"acdc-edX","metadata":{"permalink":"/blog/acdc-edX","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-01-07-introduction/index.md","source":"@site/blog/2025-01-07-introduction/index.md","title":"WTF is ACDC?","description":"An unfiltered, brutally critical take on the first week of the ACDC course\u2014where ambition meets poor execution.","date":"2025-01-07T00:00:00.000Z","tags":[{"inline":false,"label":"Autonomous driving","permalink":"/blog/tags/autonomous-driving","description":"Content related to autonomous driving technologies, systems, and research."},{"inline":false,"label":"Edx","permalink":"/blog/tags/ed-x","description":"Resources and materials associated with edX courses and programs."},{"inline":false,"label":"Rwth aachen","permalink":"/blog/tags/rwth-aachen","description":"Information and updates pertaining to RWTH Aachen University."}],"readingTime":3.875,"hasTruncateMarker":true,"authors":[{"name":"\xc7a\u011fr\u0131 \xc7at\u0131k","title":"Developer","url":"https://github.com/CagriCatik","page":{"permalink":"/blog/authors/cagri-catik"},"socials":{"x":"https://x.com/CagriCatik","github":"https://github.com/CagriCatik"},"imageURL":"https://github.com/CagriCatik.png","key":"CagriCatik"}],"frontMatter":{"slug":"acdc-edX","title":"WTF is ACDC?","authors":["CagriCatik"],"tags":["Autonomous Driving","edX","RWTH Aachen"]},"unlisted":false,"nextItem":{"title":"ROS, ROS2, and the Art of Wasting Time","permalink":"/blog/acdc-edX-ros"}},"content":"An unfiltered, brutally critical take on the first week of the ACDC course\u2014where ambition meets poor execution.\\n\\n\x3c!-- truncate --\x3e\\n\\n### ACDC: Bold Promises, Mild Deliveries\\n\\nThe Automated and Connected Driving Challenges course is an ambitious, sprawling beast. Marketed as your gateway to mastering the future of mobility, it teeters somewhere between a groundbreaking educational experience and a chaotic circus of lofty ideals, half-baked tutorials, and endless technical hurdles. Let\u2019s peel back the layers of this onion.\\n\\n### Ambition: Dream Big, Fail Small\\n\\nThe course proudly proclaims its mission: *\\"Prepare students for interdisciplinary research and inspire them to shape the future of mobility.\\"* A noble goal, but let\u2019s call a spade a spade. Most of us aren\u2019t here to write groundbreaking papers or revolutionize automotive engineering. We\u2019re here for practical skills, employable knowledge, and let\u2019s be honest\u2014a certificate to pad the resume.\\n\\nInstead, you get drowned in concepts like \\"connected mobility\\" and \\"interdisciplinary function development.\\" Translation: a lot of jargon, very little actionable knowledge. By week two, you\u2019ll be asking yourself if you accidentally signed up for a philosophy course.\\n\\n### ROS: The Holy Grail or Just Plumbing?\\n\\nAh, Robot Operating System (ROS)\u2014the cornerstone of ACDC\u2019s curriculum. Praised for its open-source charm and \\"lightweight\\" architecture, it\u2019s positioned as the savior of automated systems. But let\u2019s face it: ROS is only lightweight until you spend six hours debugging your first node, then realize it\u2019s because of a missing package buried in the 37th subfolder.\\n\\nThe course promises to teach you ROS foundations, but it glosses over the fact that mastering ROS is like learning a new language while blindfolded. And then there\u2019s ROS2\u2014the younger, fancier sibling that everyone claims is the future, yet half the tools you need are still in beta. It\u2019s like being told to learn Windows Vista because Windows 11 isn\u2019t quite ready.\\n\\n### Assignments: \\"Hands-On Learning\\" or Just Busy Work?\\n\\nThe coding assignments sound exciting on paper. Python, C++, Jupyter Notebooks\u2014it\u2019s a buffet of tech tools. But the execution? Let\u2019s just say the phrase \\"figure it out yourself\\" should be in the course syllabus. The assignments oscillate between \\"too simplistic to be useful\\" and \\"so complex that only the professor\u2019s pet can solve them.\\"\\n\\nWhat\u2019s worse, the feedback system is non-existent. Did you submit code that barely compiles? Great, here\u2019s a generic \\"good effort\\" badge. There\u2019s no meaningful guidance to help you understand why your node keeps crashing, just a vague suggestion to \\"check the documentation\\"\u2014because we all know ROS documentation is a joy to navigate.\\n\\n### Tools: Death by Overengineering\\n\\nLinux, Docker, GitHub, Jupyter\u2014on their own, these tools are powerful. Together, they form a chaotic labyrinth that only seasoned developers can navigate. The course throws you into the deep end with these tools, expecting you to swim without a lifejacket. New to Docker? Too bad. Don\u2019t know Git? Hope you like Googling.\\n\\nAnd then there\u2019s the infamous GitHub Issues. The course encourages collaboration by having students log their problems as issues. Sounds great, right? Until you realize that half the issues are duplicates, and the other half are barely legible cries for help.\\n\\n### The A-Model: A Masterpiece of Overcomplication\\n\\nThe A-Model diagrams are a recurring feature, meant to show the intricacies of automated driving. In reality, they\u2019re a beautiful mess of arrows, boxes, and terms like \\"Maneuver Planning\\" and \\"Stabilization.\\" They look fantastic in a presentation but are about as useful as a chocolate teapot when it comes to actual implementation. Good luck applying them to a real-world problem.\\n\\n### Objectivity Check: Is It All Bad?\\n\\nNo, it\u2019s not all bad. ACDC does introduce you to some genuinely valuable concepts. The focus on ROS and its integration into connected driving is relevant, and the community-driven approach has potential. If you\u2019re disciplined, resourceful, and willing to fill in the gaps yourself, there\u2019s a lot to gain here.\\n\\nBut let\u2019s not sugarcoat the truth: this course demands more from you than it gives back. It\u2019s like a bad gym trainer\u2014happy to yell at you to lift more weight but unwilling to show you proper form.\\n\\n### The Verdict: Proceed with Caution\\n\\nACDC is not for the faint of heart. It\u2019s a whirlwind of concepts, tools, and expectations that assumes you already know half the material. If you\u2019re here for a polished, beginner-friendly experience, you\u2019re in the wrong place. But if you enjoy chaos, have a masochistic streak, and are willing to teach yourself most of the content, ACDC might just work for you.\\n\\nJust don\u2019t forget to caffeinate. Heavily.\\n\\n---\\n\\n> *Disclaimer: The author might have a chip on their shoulder after wrestling with ROS nodes at 3 AM. Results may vary.*"},{"id":"acdc-edX-ros","metadata":{"permalink":"/blog/acdc-edX-ros","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-01-04-wtf-with-ros/index.md","source":"@site/blog/2025-01-04-wtf-with-ros/index.md","title":"ROS, ROS2, and the Art of Wasting Time","description":"A scathing critique of ACDC\'s decision to introduce both ROS and ROS2 in Week 1\u2014because who doesn\u2019t love learning outdated tech alongside its replacement?","date":"2025-01-04T00:00:00.000Z","tags":[{"inline":false,"label":"Autonomous driving","permalink":"/blog/tags/autonomous-driving","description":"Content related to autonomous driving technologies, systems, and research."},{"inline":false,"label":"Edx","permalink":"/blog/tags/ed-x","description":"Resources and materials associated with edX courses and programs."},{"inline":false,"label":"Rwth aachen","permalink":"/blog/tags/rwth-aachen","description":"Information and updates pertaining to RWTH Aachen University."}],"readingTime":3.68,"hasTruncateMarker":true,"authors":[{"name":"\xc7a\u011fr\u0131 \xc7at\u0131k","title":"Developer","url":"https://github.com/CagriCatik","page":{"permalink":"/blog/authors/cagri-catik"},"socials":{"x":"https://x.com/CagriCatik","github":"https://github.com/CagriCatik"},"imageURL":"https://github.com/CagriCatik.png","key":"CagriCatik"}],"frontMatter":{"title":"ROS, ROS2, and the Art of Wasting Time","description":"A scathing critique of ACDC\'s decision to introduce both ROS and ROS2 in Week 1\u2014because who doesn\u2019t love learning outdated tech alongside its replacement?","slug":"acdc-edX-ros","authors":["CagriCatik"],"tags":["Autonomous Driving","edX","RWTH Aachen"]},"unlisted":false,"prevItem":{"title":"WTF is ACDC?","permalink":"/blog/acdc-edX"},"nextItem":{"title":"A-Model? Overengineered Mess?","permalink":"/blog/a-model-critique"}},"content":"ROS, ROS2, and the Fine Line Between Ambition and Absurdity. \\n\\n\\n\x3c!-- truncate --\x3e\\n\\nWeek 1 of ACDC introduces you to the *foundation* of robotics development: the Robot Operating System (ROS). But why stop at one system when you can overload students with **two**? That\u2019s right\u2014ACDC has decided to teach both ROS and ROS2 at the same time, in what can only be described as an exercise in futility.\\n\\n## ROS vs. ROS2: A Tale of Two Systems\\n\\nFor the uninitiated, ROS (Robot Operating System) is an open-source framework for robotics development that\u2019s been around for over a decade. ROS2 is its younger, shinier sibling, designed to address the flaws of its predecessor. Sounds great, right? Except there\u2019s one glaring problem:\\n\\n**ROS is on its way out.** Its most recent distribution, Noetic, reaches end-of-life in 2025. Meanwhile, ROS2 is actively being developed, with support for modern features like real-time communication and multi-threading.\\n\\nSo why, in the name of all that is logical, does ACDC insist on teaching both simultaneously? Are we supposed to master outdated tech while also grappling with its replacement? If ROS2 is the future, why not just focus on that?\\n\\n## The Problem with Teaching Two Systems at Once\\n\\n1. **Split Focus, Split Sanity**  \\n   Learning one complex framework is hard enough. Introducing two frameworks with overlapping but subtly different concepts is a recipe for confusion. Are we supposed to focus on ROS\'s `roslaunch` or ROS2\'s `ros2 launch`? Should we learn about `roscore` even though ROS2 doesn\u2019t use it? ACDC offers no clear guidance here\u2014just a giant heap of terms and tools.\\n\\n2. **Outdated Knowledge**  \\n   ROS is like a flip phone in the age of smartphones\u2014technically functional, but largely irrelevant. By the time students complete this course, their ROS knowledge will be as useful as knowing how to set up a MySpace page. Why waste time on a system that\u2019s already fading into obscurity?.\\n\\n3. **ROS2 is Superior (Mostly)**  \\n   ROS2 isn\u2019t just a minor update; it\u2019s a ground-up redesign. It offers critical improvements like real-time capabilities, better security, and cross-platform support. Teaching ROS alongside ROS2 feels like teaching someone how to drive stick shift right before they buy an electric car. It\u2019s not just unnecessary\u2014it\u2019s counterproductive.\\n\\n4. **The \\"Both Are Useful\\" Fallacy**  \\n   The course tries to justify this madness by suggesting that both systems are still relevant. Sure, some legacy projects still use ROS, but industry trends clearly favor ROS2. If the goal is to prepare students for the future, why anchor them to the past?\\n\\n## The Practical Nightmare\\n\\nLet\u2019s talk about implementation. Week 1 expects you to dive into ROS basics like nodes, topics, and messages, while also introducing ROS2 features like DDS (Data Distribution Service). The result? Pure chaos.\\n\\n- **Tool Overload**: You\u2019re forced to install and juggle tools for both systems, each with their quirks. Want to use RVIZ? Make sure you\u2019re running the right version for the right system.\\n- **Conflicting Commands**: ROS commands start with `ros`, while ROS2 commands start with `ros2`. Simple enough\u2014until you accidentally mix them up and spend an hour troubleshooting why your topic isn\u2019t publishing.\\n- **Double the Bugs**: ROS is infamous for its dependency hell. ROS2 improves on this but introduces its own set of quirks. Now imagine dealing with bugs from both systems simultaneously. Fun times.\\n\\n## The Missed Opportunity\\n\\nThis could\u2019ve been a fantastic chance to focus entirely on ROS2, equipping students with cutting-edge skills. Instead, the course wastes time teaching a dying system, leaving students with a fragmented understanding of both. It\u2019s like being handed two half-built bicycles and told to ride them at the same time.\\n\\n## The Objective Perspective (Because Fairness is Overrated)\\n\\nYes, ROS has historical significance, and some industries still use it. But the decision to teach both ROS and ROS2 in parallel lacks foresight. ACDC claims to prepare students for the future, but clinging to ROS feels like preparing for a horse-drawn carriage comeback.\\n\\n## Final Thoughts: Pick a Lane, ACDC\\n\\nThe simultaneous introduction of ROS and ROS2 isn\u2019t just unnecessary\u2014it\u2019s a disservice to students. It splits focus, wastes time, and muddles the learning experience. If ACDC wants to be taken seriously, it needs to stop living in the past and commit to the future.\\n\\nFor now, we\u2019ll keep flipping between ROS and ROS2, wondering if this dual approach is an elaborate prank. Thanks, ACDC.\\n\\n---\\n\\n> *Disclaimer: This review contains no exaggerations\u2014just cold, hard truths.*"},{"id":"a-model-critique","metadata":{"permalink":"/blog/a-model-critique","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2025-01-02-A-Model/index.md","source":"@site/blog/2025-01-02-A-Model/index.md","title":"A-Model? Overengineered Mess?","description":"A critical look at the A-Model for automated driving, its practical relevance, and the academic obsession with overengineered process models.","date":"2025-01-02T00:00:00.000Z","tags":[{"inline":false,"label":"Autonomous driving","permalink":"/blog/tags/autonomous-driving","description":"Content related to autonomous driving technologies, systems, and research."},{"inline":false,"label":"Edx","permalink":"/blog/tags/ed-x","description":"Resources and materials associated with edX courses and programs."},{"inline":false,"label":"Rwth aachen","permalink":"/blog/tags/rwth-aachen","description":"Information and updates pertaining to RWTH Aachen University."}],"readingTime":3.78,"hasTruncateMarker":true,"authors":[{"name":"\xc7a\u011fr\u0131 \xc7at\u0131k","title":"Developer","url":"https://github.com/CagriCatik","page":{"permalink":"/blog/authors/cagri-catik"},"socials":{"x":"https://x.com/CagriCatik","github":"https://github.com/CagriCatik"},"imageURL":"https://github.com/CagriCatik.png","key":"CagriCatik"}],"frontMatter":{"title":"A-Model? Overengineered Mess?","slug":"a-model-critique","authors":["CagriCatik"],"tags":["Autonomous Driving","edX","RWTH Aachen"]},"unlisted":false,"prevItem":{"title":"ROS, ROS2, and the Art of Wasting Time","permalink":"/blog/acdc-edX-ros"}},"content":"A critical look at the A-Model for automated driving, its practical relevance, and the academic obsession with overengineered process models.\\n\\n\\n\x3c!-- truncate --\x3e\\n\\n# A-Model? Do We Really Need This Overengineered Mess?\\n\\nEvery field has its overly complicated, buzzword-heavy frameworks that are more about looking impressive than actually being useful. In automated driving, the **A-Model** takes the crown. It\u2019s a sprawling, overly ambitious diagram that tries to encapsulate everything from sensor data processing to maneuver planning. But instead of empowering engineers, it drowns them in abstraction, leaving you wondering: *Do we really need this?*\\n\\n---\\n\\n## What Even Is the A-Model?\\n\\nThe A-Model claims to represent the hierarchical structure of tasks required for automated driving. It splits everything into:\\n- **Strategic Level**: Long-term planning (e.g., route planning, traffic prediction).\\n- **Tactical Level**: Short-term decisions (e.g., maneuver planning, guidance).\\n- **Operational Level**: Immediate actions (e.g., stabilization, control).\\n\\nAdd in layers like **Environment Modeling**, **Self-Perception**, and **Trajectory Planning**, and you\u2019ve got what appears to be a comprehensive framework. But peel back the layers, and what do you find? Not much beyond a fancy diagram that assumes engineers will somehow \\"figure it out.\\"\\n\\n---\\n\\n## Why the A-Model Is a Headache, Not a Help\\n\\n1. **It\u2019s Overly Abstract**  \\n   The A-Model paints a broad picture of automated driving but offers no real instructions on how to implement anything. Sure, it tells you to \\"plan a trajectory\\" or \\"model the environment,\\" but it doesn\u2019t explain *how*. It\u2019s like handing someone a map with no roads on it.\\n\\n2. **Buzzwords Galore**  \\n   Look closer at the A-Model, and you\u2019ll find it\u2019s stuffed with terms like \\"Traffic Prediction\\" and \\"Self & Environment Perception.\\" These sound impressive, but they\u2019re deliberately vague. What tools should you use for traffic prediction? What\u2019s the data flow for environment perception? The A-Model doesn\u2019t care. It just throws the terms at you and walks away.\\n\\n3. **No Practical Use for Engineers**  \\n   Engineers working on automated systems need frameworks that guide them from concept to implementation. The A-Model does nothing of the sort. Instead, it\u2019s designed for academics to pat themselves on the back and say, \\"Look how comprehensive this is!\\" If you\u2019re looking for actionable insights, you\u2019ll be sorely disappointed.\\n\\n4. **It\u2019s Trying to Do Too Much**  \\n   The A-Model attempts to cover every aspect of automated driving, from sensor data processing to stabilization. But by cramming everything into one diagram, it becomes bloated and unwieldy. Instead of providing clarity, it overwhelms you with its sheer scope.\\n\\n---\\n\\n## Is the A-Model Completely Useless?\\n\\nTo be fair, the A-Model does have some redeeming qualities:\\n- **High-Level Overview**: It\u2019s a decent tool for explaining the big picture to non-technical stakeholders.\\n- **Logical Structure**: The separation into strategic, tactical, and operational levels makes sense conceptually, even if it lacks practical depth.\\n\\nBut let\u2019s not kid ourselves: these are minor benefits. When it comes to actually building automated systems, the A-Model is more of a distraction than a solution.\\n\\n---\\n\\n## Why Academia Loves Models Like This\\n\\nThe A-Model is a prime example of what happens when academia prioritizes appearances over practicality. Academics love these kinds of frameworks because they look good in papers, conferences, and funding proposals. They\u2019re full of buzzwords, visually impressive, and suggest a level of mastery that isn\u2019t actually there.\\n\\nBut for engineers in the field? Models like the A-Model are a dead weight. They don\u2019t solve real problems\u2014they just add an extra layer of abstraction to an already complex field.\\n\\n---\\n\\n## Conclusion: We Need Actionable Frameworks, Not Abstract Diagrams\\n\\nThe A-Model is a classic example of an academic framework that overpromises and underdelivers. While it looks impressive and provides a broad overview, it offers little to no value for actual engineers trying to solve real-world problems. Instead of empowering teams, it bogs them down in unnecessary abstraction and buzzword overload.\\n\\nThis obsession with overcomplicated frameworks isn\u2019t new. I once had a professor at TU Braunschweig who was similarly obsessed with his own \\"design models.\\" His approach, much like the A-Model, was full of circles, arrows, and vague terms that seemed designed to confuse rather than clarify. It was as if he believed the more convoluted the diagram, the better it was. Spoiler: It wasn\u2019t.\\n\\nWe don\u2019t need more theoretical frameworks like the A-Model or stupid maurer\u2019s process circle. We need tools, clear methodologies, and actionable steps that help engineers build systems\u2014not impress reviewers at academic conferences.\\n\\n---\\n\\n> *Disclaimer: No A-Models or professors were harmed in the writing of this blog, though their design philosophies were thoroughly scrutinized.*"}]}}')}}]);