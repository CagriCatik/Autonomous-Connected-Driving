"use strict";(self.webpackChunkacd=self.webpackChunkacd||[]).push([[3144],{22:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"ros/nodes","title":"ROS Node","description":"In ROS (Robot Operating System) 1, a node is a fundamental building block of the ROS computational graph. Nodes are processes that perform computation and communicate with other nodes in a distributed system. This modularity allows developers to build complex robotic systems by composing multiple nodes, each responsible for a specific task, such as perception, control, or actuation.","source":"@site/docs/ros/07_nodes.md","sourceDirName":"ros","slug":"/ros/nodes","permalink":"/Autonomous-Connected-Driving/docs/ros/nodes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ros/07_nodes.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"rosSidebar","previous":{"title":"ROS Master","permalink":"/Autonomous-Connected-Driving/docs/ros/master"},"next":{"title":"parameter_server","permalink":"/Autonomous-Connected-Driving/docs/ros/parameter_server"}}');var r=s(4848),o=s(8453);const a={},d="ROS Node",c={},t=[{value:"Characteristics of a ROS1 Node",id:"characteristics-of-a-ros1-node",level:2},{value:"Creating a ROS1 Node",id:"creating-a-ros1-node",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Steps to Create a Node",id:"steps-to-create-a-node",level:3},{value:"1. Set Up Your Package",id:"1-set-up-your-package",level:4},{value:"2. Write the Node Code",id:"2-write-the-node-code",level:4},{value:"Python Node Example",id:"python-node-example",level:5},{value:"C++ Node Example",id:"c-node-example",level:5},{value:"3. Add Dependencies",id:"3-add-dependencies",level:4},{value:"4. Build the Node",id:"4-build-the-node",level:4},{value:"5. Run the Node",id:"5-run-the-node",level:4},{value:"Communicating with Other Nodes",id:"communicating-with-other-nodes",level:2},{value:"Topics",id:"topics",level:3},{value:"Services",id:"services",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Debugging and Monitoring",id:"debugging-and-monitoring",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ros-node",children:"ROS Node"})}),"\n",(0,r.jsxs)(n.p,{children:["In ROS (Robot Operating System) 1, a ",(0,r.jsx)(n.strong,{children:"node"})," is a fundamental building block of the ROS computational graph. Nodes are processes that perform computation and communicate with other nodes in a distributed system. This modularity allows developers to build complex robotic systems by composing multiple nodes, each responsible for a specific task, such as perception, control, or actuation."]}),"\n",(0,r.jsx)(n.h2,{id:"characteristics-of-a-ros1-node",children:"Characteristics of a ROS1 Node"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Uniqueness"}),": Each node has a unique name within the ROS graph. Naming conflicts can be avoided using namespaces or remapping."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Communication"}),": Nodes communicate with one another using topics, services, and actions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Distributed"}),": Nodes can run on different machines as long as they are part of the same ROS master."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lifecycle"}),": A node's lifecycle is typically managed by the user\u2014launch, runtime, and shutdown are explicit steps in the workflow."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-ros1-node",children:"Creating a ROS1 Node"}),"\n",(0,r.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"Before creating a ROS1 node, ensure the following:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"ROS1 is installed on your system."}),"\n",(0,r.jsxs)(n.li,{children:["A ROS workspace is set up (e.g., ",(0,r.jsx)(n.code,{children:"catkin_ws"}),")."]}),"\n",(0,r.jsx)(n.li,{children:"Basic understanding of programming in Python or C++."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"steps-to-create-a-node",children:"Steps to Create a Node"}),"\n",(0,r.jsx)(n.h4,{id:"1-set-up-your-package",children:"1. Set Up Your Package"}),"\n",(0,r.jsx)(n.p,{children:"Create a package that will house your node:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd ~/catkin_ws/src\ncatkin_create_pkg <package_name> roscpp rospy std_msgs\ncd ~/catkin_ws\ncatkin_make\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Replace ",(0,r.jsx)(n.code,{children:"<package_name>"})," with your desired package name."]}),"\n",(0,r.jsx)(n.h4,{id:"2-write-the-node-code",children:"2. Write the Node Code"}),"\n",(0,r.jsx)(n.p,{children:"Nodes can be written in Python or C++. Below is an example for each language."}),"\n",(0,r.jsx)(n.h5,{id:"python-node-example",children:"Python Node Example"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File:"})," ",(0,r.jsx)(n.code,{children:"~/catkin_ws/src/<package_name>/scripts/simple_node.py"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"#!/usr/bin/env python\n\nimport rospy\nfrom std_msgs.msg import String\n\ndef talker():\n    pub = rospy.Publisher('chatter', String, queue_size=10)\n    rospy.init_node('simple_node', anonymous=True)\n    rate = rospy.Rate(10)  # 10 Hz\n\n    while not rospy.is_shutdown():\n        hello_str = \"Hello ROS World %s\" % rospy.get_time()\n        rospy.loginfo(hello_str)\n        pub.publish(hello_str)\n        rate.sleep()\n\nif __name__ == '__main__':\n    try:\n        talker()\n    except rospy.ROSInterruptException:\n        pass\n"})}),"\n",(0,r.jsx)(n.p,{children:"Make the script executable:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"chmod +x ~/catkin_ws/src/<package_name>/scripts/simple_node.py\n"})}),"\n",(0,r.jsx)(n.h5,{id:"c-node-example",children:"C++ Node Example"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File:"})," ",(0,r.jsx)(n.code,{children:"~/catkin_ws/src/<package_name>/src/simple_node.cpp"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <ros/ros.h>\n#include <std_msgs/String.h>\n\nint main(int argc, char **argv) {\n    ros::init(argc, argv, "simple_node");\n    ros::NodeHandle nh;\n\n    ros::Publisher pub = nh.advertise<std_msgs::String>("chatter", 10);\n\n    ros::Rate rate(10);\n    while (ros::ok()) {\n        std_msgs::String msg;\n        msg.data = "Hello ROS World";\n\n        ROS_INFO("%s", msg.data.c_str());\n        pub.publish(msg);\n\n        rate.sleep();\n    }\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"3-add-dependencies",children:"3. Add Dependencies"}),"\n",(0,r.jsxs)(n.p,{children:["Update the ",(0,r.jsx)(n.code,{children:"CMakeLists.txt"})," and ",(0,r.jsx)(n.code,{children:"package.xml"})," files in your package to include required dependencies."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"CMakeLists.txt"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cmake",children:"add_executable(simple_node src/simple_node.cpp)\ntarget_link_libraries(simple_node ${catkin_LIBRARIES})\nadd_dependencies(simple_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"package.xml"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<depend>roscpp</depend>\n<depend>std_msgs</depend>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"4-build-the-node",children:"4. Build the Node"}),"\n",(0,r.jsxs)(n.p,{children:["Build your package using ",(0,r.jsx)(n.code,{children:"catkin_make"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd ~/catkin_ws\ncatkin_make\n"})}),"\n",(0,r.jsx)(n.h4,{id:"5-run-the-node",children:"5. Run the Node"}),"\n",(0,r.jsxs)(n.p,{children:["Launch the node using ",(0,r.jsx)(n.code,{children:"rosrun"})," or ",(0,r.jsx)(n.code,{children:"roslaunch"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"rosrun <package_name> simple_node\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"communicating-with-other-nodes",children:"Communicating with Other Nodes"}),"\n",(0,r.jsx)(n.h3,{id:"topics",children:"Topics"}),"\n",(0,r.jsxs)(n.p,{children:["Topics provide a publisher-subscriber mechanism for nodes to communicate. Use ",(0,r.jsx)(n.code,{children:"rostopic"})," commands to inspect topics:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"rostopic list\nrostopic echo /chatter\n"})}),"\n",(0,r.jsx)(n.h3,{id:"services",children:"Services"}),"\n",(0,r.jsxs)(n.p,{children:["Services allow synchronous communication between nodes. Define a service in a ",(0,r.jsx)(n.code,{children:".srv"})," file and generate the required headers."]}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(n.p,{children:"Nodes can read and write parameters from the ROS parameter server. Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"my_param = rospy.get_param('/param_name', default_value)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"debugging-and-monitoring",children:"Debugging and Monitoring"}),"\n",(0,r.jsx)(n.p,{children:"Use ROS tools to debug and monitor your nodes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rosnode list"}),": List active nodes."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rosnode info <node_name>"}),": Get information about a node."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rqt_graph"}),": Visualize the node graph."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"roslog"}),": Access log files."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use meaningful and unique names for your nodes."}),"\n",(0,r.jsx)(n.li,{children:"Handle exceptions and errors gracefully."}),"\n",(0,r.jsx)(n.li,{children:"Test nodes individually before integration."}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"roslaunch"})," for complex setups."]}),"\n",(0,r.jsx)(n.li,{children:"Follow ROS coding standards and guidelines."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"ROS1 nodes are essential components in building modular, distributed robotic systems. By understanding their lifecycle, communication mechanisms, and best practices, you can effectively design and deploy robust robotic applications."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var i=s(6540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);