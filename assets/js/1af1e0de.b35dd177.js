"use strict";(self.webpackChunkacd=self.webpackChunkacd||[]).push([[9624],{9453:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"ros/filesystem","title":"ROS Filesystem","description":"The ROS1 filesystem forms the backbone of the ROS (Robot Operating System) architecture, defining the structure and organization of files and directories used within a ROS workspace. Understanding the ROS1 filesystem is critical for managing projects, developing packages, and collaborating effectively in robotics development. This document provides a comprehensive overview of the ROS1 filesystem, including its key components and best practices.","source":"@site/docs/ros/05_filesystem.md","sourceDirName":"ros","slug":"/ros/filesystem","permalink":"/Autonomous-Connected-Driving/docs/ros/filesystem","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ros/05_filesystem.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"rosSidebar","previous":{"title":"ROS Foundations","permalink":"/Autonomous-Connected-Driving/docs/ros/ros_foundations"},"next":{"title":"ROS Master","permalink":"/Autonomous-Connected-Driving/docs/ros/master"}}');var a=s(4848),l=s(8453);const r={},c="ROS Filesystem",t={},o=[{value:"1. ROS1 Filesystem Hierarchy",id:"1-ros1-filesystem-hierarchy",level:2},{value:"1.1 Workspaces",id:"11-workspaces",level:3},{value:"Example Workspace Layout",id:"example-workspace-layout",level:4},{value:"1.2 Packages",id:"12-packages",level:3},{value:"Example Package Layout",id:"example-package-layout",level:4},{value:"1.3 Nodes",id:"13-nodes",level:3},{value:"1.4 Other Files",id:"14-other-files",level:3},{value:"2. Core Files in ROS1 Filesystem",id:"2-core-files-in-ros1-filesystem",level:2},{value:"2.1 CMakeLists.txt",id:"21-cmakeliststxt",level:3},{value:"Key Sections:",id:"key-sections",level:4},{value:"2.2 package.xml",id:"22-packagexml",level:3},{value:"Example:",id:"example",level:4},{value:"2.3 launch Files",id:"23-launch-files",level:3},{value:"Example:",id:"example-1",level:4},{value:"3. Important Commands",id:"3-important-commands",level:2},{value:"3.1 Workspace Initialization",id:"31-workspace-initialization",level:3},{value:"3.2 Package Creation",id:"32-package-creation",level:3},{value:"3.3 Building the Workspace",id:"33-building-the-workspace",level:3},{value:"3.4 Launching Nodes",id:"34-launching-nodes",level:3},{value:"4. Best Practices",id:"4-best-practices",level:2},{value:"5. Troubleshooting",id:"5-troubleshooting",level:2},{value:"Common Issues:",id:"common-issues",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"ros-filesystem",children:"ROS Filesystem"})}),"\n",(0,a.jsx)(n.p,{children:"The ROS1 filesystem forms the backbone of the ROS (Robot Operating System) architecture, defining the structure and organization of files and directories used within a ROS workspace. Understanding the ROS1 filesystem is critical for managing projects, developing packages, and collaborating effectively in robotics development. This document provides a comprehensive overview of the ROS1 filesystem, including its key components and best practices."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"1-ros1-filesystem-hierarchy",children:"1. ROS1 Filesystem Hierarchy"}),"\n",(0,a.jsx)(n.p,{children:"The ROS1 filesystem is organized into a workspace structure. The hierarchy consists of workspaces, packages, nodes, and other associated files. Here is an overview of the key components:"}),"\n",(0,a.jsx)(n.h3,{id:"11-workspaces",children:"1.1 Workspaces"}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.strong,{children:"workspace"})," is a directory structure that contains ROS packages and allows developers to build and manage their projects. The default workspace is usually ",(0,a.jsx)(n.code,{children:"catkin_ws"}),". Each workspace typically contains the following subdirectories:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"src/"}),": Contains the source code of ROS packages."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"devel/"}),": Contains the build outputs and environment setup scripts."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"build/"}),": Temporary build files generated by the build system."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"install/"}),": Contains installed packages and runtime files after ",(0,a.jsx)(n.code,{children:"catkin_make install"})," or ",(0,a.jsx)(n.code,{children:"catkin build --install"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-workspace-layout",children:"Example Workspace Layout"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"catkin_ws/\n  src/\n    package_1/\n    package_2/\n  build/\n  devel/\n  install/\n"})}),"\n",(0,a.jsx)(n.h3,{id:"12-packages",children:"1.2 Packages"}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.strong,{children:"package"})," is the smallest unit of ROS code and serves as the building block of the ROS ecosystem. Each package contains:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"CMakeLists.txt"}),": The build configuration file."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"package.xml"}),": The metadata file describing the package."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"src/"}),": The source code of the package (e.g., Python scripts, C++ files)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"include/"}),": Contains header files for C++ packages."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"launch/"}),": Contains ",(0,a.jsx)(n.code,{children:".launch"})," files for starting nodes."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"config/"}),": Configuration files (e.g., ",(0,a.jsx)(n.code,{children:".yaml"})," files)."]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-package-layout",children:"Example Package Layout"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"package_name/\n  CMakeLists.txt\n  package.xml\n  src/\n  include/\n  launch/\n  config/\n"})}),"\n",(0,a.jsx)(n.h3,{id:"13-nodes",children:"1.3 Nodes"}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.strong,{children:"node"})," is an executable within a package that performs specific tasks. Nodes are responsible for communication and computation in a ROS application. Nodes can be written in Python or C++ and are typically located in the ",(0,a.jsx)(n.code,{children:"src/"})," directory."]}),"\n",(0,a.jsx)(n.h3,{id:"14-other-files",children:"1.4 Other Files"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:".msg"})," and ",(0,a.jsx)(n.strong,{children:".srv"})," files: Define custom message and service types."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:".action"})," files: Define custom action types for actionlib."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"2-core-files-in-ros1-filesystem",children:"2. Core Files in ROS1 Filesystem"}),"\n",(0,a.jsx)(n.h3,{id:"21-cmakeliststxt",children:"2.1 CMakeLists.txt"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"CMakeLists.txt"})," file is the build script for a ROS package. It defines how the package is built, which dependencies are required, and where the executables are located."]}),"\n",(0,a.jsx)(n.h4,{id:"key-sections",children:"Key Sections:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"find_package(catkin REQUIRED COMPONENTS ...)"}),": Lists package dependencies."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"catkin_package()"}),": Exports libraries and include directories."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"add_executable()"}),": Defines the executables to be built."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"target_link_libraries()"}),": Links executables with libraries."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"22-packagexml",children:"2.2 package.xml"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"package.xml"})," file contains metadata about the ROS package, such as its name, version, dependencies, and description. It ensures compatibility and proper package resolution."]}),"\n",(0,a.jsx)(n.h4,{id:"example",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<package format="2">\n  <name>example_package</name>\n  <version>0.1.0</version>\n  <description>An example ROS package</description>\n  <maintainer email="maintainer@example.com">Maintainer Name</maintainer>\n  <license>Apache 2.0</license>\n\n  <buildtool_depend>catkin</buildtool_depend>\n  <build_depend>roscpp</build_depend>\n  <exec_depend>rospy</exec_depend>\n</package>\n'})}),"\n",(0,a.jsx)(n.h3,{id:"23-launch-files",children:"2.3 launch Files"}),"\n",(0,a.jsx)(n.p,{children:"Launch files are XML files used to start multiple nodes and configure parameters. These files simplify the process of managing complex systems."}),"\n",(0,a.jsx)(n.h4,{id:"example-1",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<launch>\n  <node pkg="example_package" type="example_node" name="example_node" output="screen" />\n</launch>\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"3-important-commands",children:"3. Important Commands"}),"\n",(0,a.jsx)(n.h3,{id:"31-workspace-initialization",children:"3.1 Workspace Initialization"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Create a Workspace:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir -p ~/catkin_ws/src\ncd ~/catkin_ws/\ncatkin_make\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Source the Workspace:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"source ~/catkin_ws/devel/setup.bash\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"32-package-creation",children:"3.2 Package Creation"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Create a New Package:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd ~/catkin_ws/src\ncatkin_create_pkg package_name std_msgs rospy roscpp\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"33-building-the-workspace",children:"3.3 Building the Workspace"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Build with catkin_make:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd ~/catkin_ws/\ncatkin_make\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Build with catkin tools:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"catkin build\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"34-launching-nodes",children:"3.4 Launching Nodes"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Run a Node:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"rosrun package_name node_name\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Launch a File:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"roslaunch package_name file_name.launch\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"4-best-practices",children:"4. Best Practices"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Maintain Consistent Naming:"})," Use meaningful and consistent names for packages, nodes, and files."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Organize Files:"})," Keep source files, launch files, and configurations in their respective directories."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Version Control:"})," Use Git or another version control system to manage your workspace."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Document Code:"})," Add comments and maintain up-to-date ",(0,a.jsx)(n.code,{children:"README.md"})," files for packages."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Source Environment:"})," Always source the workspace setup script before working with ROS."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"5-troubleshooting",children:"5. Troubleshooting"}),"\n",(0,a.jsx)(n.h3,{id:"common-issues",children:"Common Issues:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Workspace not sourced:"})," Ensure you source ",(0,a.jsx)(n.code,{children:"setup.bash"})," after building."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Missing dependencies:"})," Use ",(0,a.jsx)(n.code,{children:"rosdep install"})," to install dependencies.","\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"rosdep install --from-paths src --ignore-src -r -y\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Build errors:"})," Clean the workspace and rebuild.","\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"catkin_make clean\ncatkin_make\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"Understanding the ROS1 filesystem is essential for effective development and project management in ROS. By adhering to its structure and following best practices, developers can create scalable and maintainable robotic systems."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var i=s(6540);const a={},l=i.createContext(a);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);