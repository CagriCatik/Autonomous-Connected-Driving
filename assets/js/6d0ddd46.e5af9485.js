"use strict";(self.webpackChunkacd=self.webpackChunkacd||[]).push([[6859],{3096:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"ros2/subscriber","title":"Creating Your First ROS2 Subscriber Node","description":"In ROS 2 (Robot Operating System 2), the Subscriber node is an essential component used to receive and process messages published by a Publisher node. This documentation provides a detailed guide for setting up and implementing a ROS 2 Subscriber node, catering to both beginners and advanced users. By the end of this guide, you will understand how to create a Subscriber node, process incoming messages, and integrate it into a larger ROS 2 application.","source":"@site/docs/ros2/06_subscriber.md","sourceDirName":"ros2","slug":"/ros2/subscriber","permalink":"/Autonomous-Connected-Driving/docs/ros2/subscriber","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ros2/06_subscriber.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"ros2Sidebar","previous":{"title":"Creating Your First ROS2 Publisher Node","permalink":"/Autonomous-Connected-Driving/docs/ros2/publisher"},"next":{"title":"Understanding ROS 2 Packages","permalink":"/Autonomous-Connected-Driving/docs/ros2/package"}}');var r=s(4848),c=s(8453);const t={},a="Creating Your First ROS2 Subscriber Node",d={},o=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Create a ROS 2 Package",id:"step-1-create-a-ros-2-package",level:2},{value:"Add Dependencies",id:"add-dependencies",level:3},{value:"Step 2: Define the Subscriber Node",id:"step-2-define-the-subscriber-node",level:2},{value:"Python Implementation",id:"python-implementation",level:3},{value:"C++ Implementation",id:"c-implementation",level:3},{value:"Step 3: Build and Run the Subscriber Node",id:"step-3-build-and-run-the-subscriber-node",level:2},{value:"Debugging Tips",id:"debugging-tips",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Quality of Service (QoS)",id:"quality-of-service-qos",level:3},{value:"Using Custom Messages",id:"using-custom-messages",level:3},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"creating-your-first-ros2-subscriber-node",children:"Creating Your First ROS2 Subscriber Node"})}),"\n",(0,r.jsx)(n.p,{children:"In ROS 2 (Robot Operating System 2), the Subscriber node is an essential component used to receive and process messages published by a Publisher node. This documentation provides a detailed guide for setting up and implementing a ROS 2 Subscriber node, catering to both beginners and advanced users. By the end of this guide, you will understand how to create a Subscriber node, process incoming messages, and integrate it into a larger ROS 2 application."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"Before implementing a Subscriber node, ensure you have:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ROS 2 installed on your system (e.g., Humble, Galactic)."}),"\n",(0,r.jsx)(n.li,{children:"Basic understanding of ROS 2 concepts (nodes, topics, messages)."}),"\n",(0,r.jsx)(n.li,{children:"A functioning Publisher node to provide data."}),"\n",(0,r.jsx)(n.li,{children:"Python or C++ programming experience, depending on your implementation language of choice."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-1-create-a-ros-2-package",children:"Step 1: Create a ROS 2 Package"}),"\n",(0,r.jsx)(n.p,{children:"Use the following command to create a new ROS 2 package if you don\u2019t already have one:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 pkg create --build-type ament_python my_package\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Replace ",(0,r.jsx)(n.code,{children:"my_package"})," with the desired package name."]}),"\n",(0,r.jsx)(n.h3,{id:"add-dependencies",children:"Add Dependencies"}),"\n",(0,r.jsxs)(n.p,{children:["Update the ",(0,r.jsx)(n.code,{children:"package.xml"})," and ",(0,r.jsx)(n.code,{children:"setup.py"})," files to include required dependencies. Add ",(0,r.jsx)(n.code,{children:"rclpy"})," for Python or ",(0,r.jsx)(n.code,{children:"rclcpp"})," for C++ as needed."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-2-define-the-subscriber-node",children:"Step 2: Define the Subscriber Node"}),"\n",(0,r.jsx)(n.h3,{id:"python-implementation",children:"Python Implementation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Create the Node File: Navigate to the ",(0,r.jsx)(n.code,{children:"my_package"})," directory and create a new Python file, e.g., ",(0,r.jsx)(n.code,{children:"subscriber_node.py"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Write the Subscriber Code:"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import rclpy\nfrom rclpy.node import Node\nfrom std_msgs.msg import String  # Replace with your custom message type if needed\n\nclass MinimalSubscriber(Node):\n\n    def __init__(self):\n        super().__init__('minimal_subscriber')\n        self.subscription = self.create_subscription(\n            String,\n            'topic_name',  # Replace with your topic name\n            self.listener_callback,\n            10\n        )\n        self.subscription  # Prevent unused variable warning\n\n    def listener_callback(self, msg):\n        self.get_logger().info(f'Received message: {msg.data}')\n\n\ndef main(args=None):\n    rclpy.init(args=args)\n\n    subscriber = MinimalSubscriber()\n\n    rclpy.spin(subscriber)\n\n    subscriber.destroy_node()\n    rclpy.shutdown()\n\nif __name__ == '__main__':\n    main()\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Make the File Executable:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"chmod +x subscriber_node.py\n"})}),"\n",(0,r.jsx)(n.h3,{id:"c-implementation",children:"C++ Implementation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Create the Node File: Navigate to the ",(0,r.jsx)(n.code,{children:"src"})," directory of your package and create a new C++ file, e.g., ",(0,r.jsx)(n.code,{children:"subscriber_node.cpp"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Write the Subscriber Code:"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include "rclcpp/rclcpp.hpp"\n#include "std_msgs/msg/string.hpp"  // Replace with your custom message type if needed\n\nclass MinimalSubscriber : public rclcpp::Node {\npublic:\n    MinimalSubscriber()\n    : Node("minimal_subscriber") {\n        subscription_ = this->create_subscription<std_msgs::msg::String>(\n            "topic_name", 10,\n            std::bind(&MinimalSubscriber::listener_callback, this, std::placeholders::_1)\n        );\n    }\n\nprivate:\n    void listener_callback(const std_msgs::msg::String::SharedPtr msg) {\n        RCLCPP_INFO(this->get_logger(), "Received message: \'%s\'", msg->data.c_str());\n    }\n\n    rclcpp::Subscription<std_msgs::msg::String>::SharedPtr subscription_;\n};\n\nint main(int argc, char *argv[]) {\n    rclcpp::init(argc, argv);\n    rclcpp::spin(std::make_shared<MinimalSubscriber>());\n    rclcpp::shutdown();\n    return 0;\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Update CMakeLists.txt: Add the new node to your build system."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cmake",children:"add_executable(subscriber_node src/subscriber_node.cpp)\ntarget_link_libraries(subscriber_node ${rclcpp_LIBRARIES})\ninstall(TARGETS\n    subscriber_node\n    DESTINATION lib/${PROJECT_NAME})\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-3-build-and-run-the-subscriber-node",children:"Step 3: Build and Run the Subscriber Node"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Build the Package:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"colcon build --packages-select my_package\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Source the Workspace:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"source install/setup.bash\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Run the Subscriber Node:"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For Python:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 run my_package subscriber_node\n"})}),"\n",(0,r.jsx)(n.p,{children:"For C++:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 run my_package subscriber_node\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"debugging-tips",children:"Debugging Tips"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure the topic name matches between the Publisher and Subscriber."}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"ros2 topic list"})," to verify available topics."]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"ros2 topic echo <topic_name>"})," to inspect topic data."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,r.jsx)(n.h3,{id:"quality-of-service-qos",children:"Quality of Service (QoS)"}),"\n",(0,r.jsx)(n.p,{children:"Customize the QoS settings to control message delivery reliability, latency, and durability:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from rclpy.qos import QoSProfile\nqos_profile = QoSProfile(depth=10)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"using-custom-messages",children:"Using Custom Messages"}),"\n",(0,r.jsxs)(n.p,{children:["Define your custom message type and include it in your Subscriber. Ensure the ",(0,r.jsx)(n.code,{children:"msg"})," file is in your package and built properly."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["This guide has demonstrated how to set up and run a Subscriber node in ROS 2 using Python or C++. For more advanced applications, consider using QoS policies, custom message types, or integrating the node into a complex system. Use debugging tools like ",(0,r.jsx)(n.code,{children:"ros2 topic list"})," and ",(0,r.jsx)(n.code,{children:"ros2 topic echo"})," to verify node functionality."]})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(6540);const r={},c=i.createContext(r);function t(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);