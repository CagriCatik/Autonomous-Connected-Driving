"use strict";(self.webpackChunkacd=self.webpackChunkacd||[]).push([[8194],{7420:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"ros2/package","title":"Understanding ROS 2 Packages","description":"ROS 2 (Robot Operating System 2) packages are fundamental units of software organization and deployment in ROS 2 applications. They allow developers to group together nodes, launch files, message and service definitions, and other resources required for robotic applications. This documentation provides a comprehensive guide to understanding the structure of ROS 2 packages and creating your own packages, catering to both beginners and advanced users.","source":"@site/docs/ros2/07_package.md","sourceDirName":"ros2","slug":"/ros2/package","permalink":"/Autonomous-Connected-Driving/docs/ros2/package","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ros2/07_package.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{},"sidebar":"ros2Sidebar","previous":{"title":"Creating Your First ROS2 Subscriber Node","permalink":"/Autonomous-Connected-Driving/docs/ros2/subscriber"},"next":{"title":"CMakeLists.txt in ROS2","permalink":"/Autonomous-Connected-Driving/docs/ros2/cmakelists"}}');var c=s(4848),i=s(8453);const r={},t="Understanding ROS 2 Packages",d={},o=[{value:"Structure of a ROS 2 Package",id:"structure-of-a-ros-2-package",level:2},{value:"Key Components",id:"key-components",level:3},{value:"Creating a ROS 2 Package",id:"creating-a-ros-2-package",level:2},{value:"Step 1: Setting Up the Workspace",id:"step-1-setting-up-the-workspace",level:3},{value:"Step 2: Creating the Package",id:"step-2-creating-the-package",level:3},{value:"For Python:",id:"for-python",level:4},{value:"For C++:",id:"for-c",level:4},{value:"Step 3: Adding Code",id:"step-3-adding-code",level:3},{value:"Python Node Example",id:"python-node-example",level:4},{value:"C++ Node Example",id:"c-node-example",level:4},{value:"Step 4: Building the Package",id:"step-4-building-the-package",level:3},{value:"Step 5: Running the Node",id:"step-5-running-the-node",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Advanced Topics",id:"advanced-topics",level:2},{value:"Custom Messages and Services",id:"custom-messages-and-services",level:3},{value:"Example: Custom Message",id:"example-custom-message",level:4},{value:"Launch Files",id:"launch-files",level:3},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"understanding-ros-2-packages",children:"Understanding ROS 2 Packages"})}),"\n",(0,c.jsx)(n.p,{children:"ROS 2 (Robot Operating System 2) packages are fundamental units of software organization and deployment in ROS 2 applications. They allow developers to group together nodes, launch files, message and service definitions, and other resources required for robotic applications. This documentation provides a comprehensive guide to understanding the structure of ROS 2 packages and creating your own packages, catering to both beginners and advanced users."}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"structure-of-a-ros-2-package",children:"Structure of a ROS 2 Package"}),"\n",(0,c.jsxs)(n.p,{children:["A ROS 2 package is a directory with a predefined structure. This structure ensures compatibility with ROS 2 tools such as ",(0,c.jsx)(n.code,{children:"colcon"})," for building and ",(0,c.jsx)(n.code,{children:"ros2"})," CLI commands for interaction. Below is the typical structure of a ROS 2 package:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"my_package/\n\u251c\u2500\u2500 package.xml\n\u251c\u2500\u2500 setup.py (for Python packages)\n\u251c\u2500\u2500 CMakeLists.txt (for C++ packages)\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 my_package/\n\u2502       \u2514\u2500\u2500 __init__.py (optional for Python packages)\n\u251c\u2500\u2500 include/\n\u2502   \u2514\u2500\u2500 my_package/ (for C++ header files)\n\u251c\u2500\u2500 msg/\n\u2502   \u2514\u2500\u2500 MyMessage.msg (custom message definitions)\n\u251c\u2500\u2500 srv/\n\u2502   \u2514\u2500\u2500 MyService.srv (custom service definitions)\n\u251c\u2500\u2500 action/\n\u2502   \u2514\u2500\u2500 MyAction.action (custom action definitions)\n\u251c\u2500\u2500 launch/\n\u2502   \u2514\u2500\u2500 my_launch_file.py (launch files)\n\u2514\u2500\u2500 test/\n    \u2514\u2500\u2500 test_my_package.py (test scripts)\n"})}),"\n",(0,c.jsx)(n.h3,{id:"key-components",children:"Key Components"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"package.xml"}),": Describes the package\u2019s metadata, including its name, version, dependencies, and maintainers."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"setup.py"})," / ",(0,c.jsx)(n.code,{children:"CMakeLists.txt"}),": Specifies how the package is built (Python or C++)."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"src/"}),": Contains the source code."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"include/"}),": Used for C++ header files."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"msg/"}),", ",(0,c.jsx)(n.code,{children:"srv/"}),", and ",(0,c.jsx)(n.code,{children:"action/"}),": Define custom messages, services, and actions respectively."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"launch/"}),": Stores launch files for starting nodes and setting configurations."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"test/"}),": Contains test cases for unit and integration testing."]}),"\n"]}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"creating-a-ros-2-package",children:"Creating a ROS 2 Package"}),"\n",(0,c.jsx)(n.h3,{id:"step-1-setting-up-the-workspace",children:"Step 1: Setting Up the Workspace"}),"\n",(0,c.jsx)(n.p,{children:"Create a new ROS 2 workspace if not already done:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"mkdir -p ~/ros2_ws/src\ncd ~/ros2_ws\ncolcon build\n"})}),"\n",(0,c.jsx)(n.p,{children:"Source the workspace:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"source install/setup.bash\n"})}),"\n",(0,c.jsx)(n.h3,{id:"step-2-creating-the-package",children:"Step 2: Creating the Package"}),"\n",(0,c.jsxs)(n.p,{children:["Use the ",(0,c.jsx)(n.code,{children:"ros2 pkg create"})," command to scaffold a new package:"]}),"\n",(0,c.jsx)(n.h4,{id:"for-python",children:"For Python:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"ros2 pkg create --build-type ament_python my_python_package\n"})}),"\n",(0,c.jsx)(n.h4,{id:"for-c",children:"For C++:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"ros2 pkg create --build-type ament_cmake my_cpp_package\n"})}),"\n",(0,c.jsxs)(n.p,{children:["This command generates a package directory with the necessary files, including ",(0,c.jsx)(n.code,{children:"package.xml"})," and ",(0,c.jsx)(n.code,{children:"setup.py"})," (or ",(0,c.jsx)(n.code,{children:"CMakeLists.txt"}),")."]}),"\n",(0,c.jsx)(n.h3,{id:"step-3-adding-code",children:"Step 3: Adding Code"}),"\n",(0,c.jsx)(n.h4,{id:"python-node-example",children:"Python Node Example"}),"\n",(0,c.jsxs)(n.p,{children:["Create a Python node under ",(0,c.jsx)(n.code,{children:"src/my_python_package/"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"# src/my_python_package/simple_node.py\nimport rclpy\nfrom rclpy.node import Node\n\nclass SimpleNode(Node):\n    def __init__(self):\n        super().__init__('simple_node')\n        self.get_logger().info('Node has started!')\n\nif __name__ == '__main__':\n    rclpy.init()\n    node = SimpleNode()\n    rclpy.spin(node)\n    node.destroy_node()\n    rclpy.shutdown()\n"})}),"\n",(0,c.jsx)(n.h4,{id:"c-node-example",children:"C++ Node Example"}),"\n",(0,c.jsxs)(n.p,{children:["Create a C++ node under ",(0,c.jsx)(n.code,{children:"src/"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-cpp",children:'// src/simple_node.cpp\n#include "rclcpp/rclcpp.hpp"\n\nclass SimpleNode : public rclcpp::Node {\npublic:\n    SimpleNode() : Node("simple_node") {\n        RCLCPP_INFO(this->get_logger(), "Node has started!");\n    }\n};\n\nint main(int argc, char *argv[]) {\n    rclcpp::init(argc, argv);\n    auto node = std::make_shared<SimpleNode>();\n    rclcpp::spin(node);\n    rclcpp::shutdown();\n    return 0;\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["Update ",(0,c.jsx)(n.code,{children:"CMakeLists.txt"})," to include the source file:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-cmake",children:"add_executable(simple_node src/simple_node.cpp)\ntarget_link_libraries(simple_node ${rclcpp_LIBRARIES})\ninstall(TARGETS simple_node DESTINATION lib/${PROJECT_NAME})\n"})}),"\n",(0,c.jsx)(n.h3,{id:"step-4-building-the-package",children:"Step 4: Building the Package"}),"\n",(0,c.jsx)(n.p,{children:"Navigate to the workspace root and build the package:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"cd ~/ros2_ws\ncolcon build --packages-select my_python_package\n"})}),"\n",(0,c.jsx)(n.h3,{id:"step-5-running-the-node",children:"Step 5: Running the Node"}),"\n",(0,c.jsx)(n.p,{children:"Source the workspace and run the node:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"source install/setup.bash\nros2 run my_python_package simple_node\n"})}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:"Consistent Naming: Use descriptive and consistent naming for packages and files."}),"\n",(0,c.jsx)(n.li,{children:"Version Control: Use a version control system like Git for managing package changes."}),"\n",(0,c.jsxs)(n.li,{children:["Documentation: Provide clear and detailed documentation in ",(0,c.jsx)(n.code,{children:"README.md"}),"."]}),"\n",(0,c.jsxs)(n.li,{children:["Testing: Implement thorough test cases and include them in the ",(0,c.jsx)(n.code,{children:"test/"})," directory."]}),"\n",(0,c.jsxs)(n.li,{children:["Dependencies: Clearly specify all dependencies in ",(0,c.jsx)(n.code,{children:"package.xml"}),"."]}),"\n"]}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,c.jsx)(n.h3,{id:"custom-messages-and-services",children:"Custom Messages and Services"}),"\n",(0,c.jsxs)(n.p,{children:["Create custom message and service definitions in ",(0,c.jsx)(n.code,{children:"msg/"})," and ",(0,c.jsx)(n.code,{children:"srv/"})," directories. Update ",(0,c.jsx)(n.code,{children:"CMakeLists.txt"})," or ",(0,c.jsx)(n.code,{children:"setup.py"})," to build them."]}),"\n",(0,c.jsx)(n.h4,{id:"example-custom-message",children:"Example: Custom Message"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"msg/MyMessage.msg"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-plaintext",children:"string data\nint32 count\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Update ",(0,c.jsx)(n.code,{children:"package.xml"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-xml",children:"<build_depend>rosidl_default_generators</build_depend>\n<exec_depend>rosidl_default_runtime</exec_depend>\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Update ",(0,c.jsx)(n.code,{children:"CMakeLists.txt"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-cmake",children:'rosidl_generate_interfaces(${PROJECT_NAME} "msg/MyMessage.msg")\n'})}),"\n",(0,c.jsx)(n.h3,{id:"launch-files",children:"Launch Files"}),"\n",(0,c.jsx)(n.p,{children:"Launch multiple nodes using Python-based launch files. Example:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"# launch/my_launch_file.py\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    return LaunchDescription([\n        Node(\n            package='my_python_package',\n            executable='simple_node',\n            name='my_node'\n        )\n    ])\n"})}),"\n",(0,c.jsx)(n.p,{children:"Run the launch file:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"ros2 launch my_python_package my_launch_file.py\n"})}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,c.jsx)(n.p,{children:"This guide provides a comprehensive overview of ROS 2 packages, from basic structure to advanced usage. By adhering to these principles, you can create well-structured, maintainable, and scalable ROS 2 packages."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>t});var a=s(6540);const c={},i=a.createContext(c);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);