"use strict";(self.webpackChunkacd=self.webpackChunkacd||[]).push([[4264],{7991:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"task/intro/ROS2-Tutorial-in-Cpp","title":"ROS2 Tutorial in C++","description":"ROS2","source":"@site/docs/task/01_intro/08_ROS2-Tutorial-in-Cpp.md","sourceDirName":"task/01_intro","slug":"/task/intro/ROS2-Tutorial-in-Cpp","permalink":"/Autonomous-Connected-Driving/docs/task/intro/ROS2-Tutorial-in-Cpp","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/task/01_intro/08_ROS2-Tutorial-in-Cpp.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"taskSidebar","previous":{"title":"ROS2 Outlook","permalink":"/Autonomous-Connected-Driving/docs/task/intro/ROS2-Outlook"},"next":{"title":"Sensor Data Processing","permalink":"/Autonomous-Connected-Driving/docs/category/sensor-data-processing"}}');var r=s(4848),t=s(8453);const a={},c="ROS2 Tutorial in C++",l={},o=[{value:"Installation of ROS2",id:"installation-of-ros2",level:2},{value:"Start the Docker Environment",id:"start-the-docker-environment",level:2},{value:"Build and source the package",id:"build-and-source-the-package",level:2},{value:"Publisher Node (Talker)",id:"publisher-node-talker",level:2},{value:"Subscriber Node (Listener)",id:"subscriber-node-listener",level:2},{value:"Package.xml",id:"packagexml",level:2},{value:"CMakeLists.txt",id:"cmakeliststxt",level:2},{value:"Start the ROS2 nodes",id:"start-the-ros2-nodes",level:2},{value:"Note about ROS2 launch files",id:"note-about-ros2-launch-files",level:3},{value:"Wrap-up",id:"wrap-up",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ros2-tutorial-in-c",children:"ROS2 Tutorial in C++"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://img.shields.io/badge/ROS2-red",alt:"ROS2"})}),"\n",(0,r.jsxs)(n.p,{children:["In this tutorial, we'll walk you through creating ",(0,r.jsx)(n.code,{children:"ROS2 C++"})," nodes. These nodes will exchange data via string messages on a specific topic. We'll be working on a basic \"",(0,r.jsx)(n.code,{children:"talker"}),'" and "',(0,r.jsx)(n.code,{children:"listener"}),'" setup, where one node acts as the ',(0,r.jsx)(n.code,{children:"publisher"})," and the other as the ",(0,r.jsx)(n.code,{children:"subscriber"}),". The publisher sends out data, and the subscriber listens to the topic to receive this information."]}),"\n",(0,r.jsxs)(n.p,{children:["The tutorial is referenced from the ",(0,r.jsx)(n.a,{href:"https://docs.ros.org/en/foxy/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.html",children:"C++ Writing a simple publisher and subscriber (C++)"})," page."]}),"\n",(0,r.jsx)(n.p,{children:"In this tutorials you will"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"examine how to configure a ROS2 C++ package"}),"\n",(0,r.jsx)(n.li,{children:"learn the rough concepts about ROS2, ROS2 launch and config files"}),"\n",(0,r.jsx)(n.li,{children:"be able to write simple Publisher & Subscriber nodes in C++"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"installation-of-ros2",children:"Installation of ROS2"}),"\n",(0,r.jsxs)(n.p,{children:["We already installed all necessary dependencies for ROS2 Humble inside of the provided docker image. Have a look into the official ",(0,r.jsx)(n.a,{href:"https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debians.html",children:"ROS2 Installation Tutorial"})," for further information."]}),"\n",(0,r.jsx)(n.h2,{id:"start-the-docker-environment",children:"Start the Docker Environment"}),"\n",(0,r.jsxs)(n.p,{children:["Navigate to the local directory ",(0,r.jsx)(n.code,{children:"${REPOSITORY}/docker"})," and execute ",(0,r.jsx)(n.code,{children:"./ros2_run.sh"}),". This will start the Docker container, in which ROS and all required libraries are preinstalled. You can stop the container by pressing ",(0,r.jsx)("kbd",{children:"Ctrl"}),"+",(0,r.jsx)("kbd",{children:"C"})," in the terminal. If everything is setup correctly you will see the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Starting new container...\n================================================================================\n\n=== CONTAINER INFORMATION ======================================================\nArchitecture: x86_64\nUbuntu: 22.04.2 LTS (Jammy Jellyfish)\nPython: 3.10.6\nROS: humble\nCMake: 3.22.1\nCUDA: 12.1.105\ncuDNN: 8.9.2\nTensorRT: 8.6.1\nTensorFlow Python: 2.13.0\nTensorFlow C/C++: \nPyTorch Python: \nPyTorch C/C++: \nAvailable GPUs: 1\n  name               driver_version   utilization.gpu [%]   utilization.memory [%]   memory.used [MiB]   memory.total [MiB]\n  NVIDIA TITAN RTX   470.182.03       0 %                   2 %                      552 MiB             24217 MiB\n===============================================================================\n\nroot@******:/home/rosuser/ws/colcon_workspace# \n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"acdc"})," folder is mounted from your host into the container. Note that your current working directory inside the container is ",(0,r.jsx)(n.code,{children:"/home/rosuser/ws/colcon_workspace"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"build-and-source-the-package",children:"Build and source the package"}),"\n",(0,r.jsxs)(n.p,{children:["The code for the image segmentation inference node can be found in the directory ",(0,r.jsx)(n.code,{children:"colcon_workspace/src/section_1/cpp_pubsub_tutorial"}),". The structure of this ",(0,r.jsx)(n.strong,{children:"C++ package"})," is illustrated in the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"cpp_pubsub_tutorial/\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 config\n|   \u2514\u2500\u2500 params.yaml\n\u251c\u2500\u2500 include\n\u251c\u2500\u2500 launch\n|   \u2514\u2500\u2500 cpp_pub_sub.launch.py\n\u251c\u2500\u2500 package.xml\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 publisher_node.cpp\n    \u2514\u2500\u2500 subscriber_node.cpp\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The main source codes is located in the directory ",(0,r.jsx)(n.code,{children:"src"}),", the launch file are located in directory ",(0,r.jsx)(n.code,{children:"launch"})," and parameters are located in ",(0,r.jsx)(n.code,{children:"config"}),". Feel free to read all the code, parameters and launch files."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd /home/rosuser/ws/colcon_workspace\nsource /opt/ros/humble/setup.bash\ncolcon build --packages-select cpp_pubsub_tutorial --symlink-install\n"})}),"\n",(0,r.jsx)(n.h2,{id:"publisher-node-talker",children:"Publisher Node (Talker)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"publisher_node.cpp"})," is a simple example of a ROS 2 publisher node using the ",(0,r.jsx)(n.code,{children:"rclcpp"})," library. The code creates a ROS 2 publisher node that publishes messages to a specified topic at a fixed rate of 500ms. The message data is a base message with a count appended to it, and the ",(0,r.jsx)(n.code,{children:"base message"})," and  ",(0,r.jsx)(n.code,{children:"topic name"})," can be set as parameters."]}),"\n",(0,r.jsx)(n.p,{children:"Let's breakdown and examine the code:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"1. Headers and Namespace:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <chrono>\n#include <memory>\n#include "rclcpp/rclcpp.hpp"\n#include "std_msgs/msg/string.hpp"\nusing namespace std::chrono_literals;\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Standard library headers like ",(0,r.jsx)(n.code,{children:"<chrono>"})," and ",(0,r.jsx)(n.code,{children:"<memory>"})," are included."]}),"\n",(0,r.jsx)(n.li,{children:"ROS 2 headers (rclcpp/rclcpp.hpp and std_msgs/msg/string.hpp) are included.\nThe using namespace std::chrono_literals allows for the use of time literals like 500ms."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["These lines depict the dependencies of the node. Remember that in the next section, you will need to include these dependencies in both the ",(0,r.jsx)(n.code,{children:"package.xml"})," and ",(0,r.jsx)(n.code,{children:"CMakeLists.txt"})," files."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"2. MinimalPublisher Class:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'  class MinimalPublisher : public rclcpp::Node\n  {\n  public:\n  // Constructor\n  MinimalPublisher()\n  : Node("minimal_publisher"), count_(0)  // Initialize the node with the name "minimal_publisher" and set count_ to 0\n  {\n      // Decleare and Load the parameters\n      declareParameters();\n      loadParameters();\n\n      // Create a publisher with the topic name "topic", using String messages, and a queue size of 10\n      publisher_ = this->create_publisher<std_msgs::msg::String>(topic_name, 10);\n      \n      // Create a timer that fires every 500ms and binds it to the timer_callback function\n      timer_ = this->create_wall_timer(\n      500ms, std::bind(&MinimalPublisher::timer_callback, this));\n  }\n\n  private:\n\n  void declareParameters()\n  {\n      // Declare the parameters with a default value\n      this->declare_parameter<std::string>("base_message", "default_message");\n      this->declare_parameter<std::string>("topic", "default_topic");\n  }\n\n  void loadParameters()\n  {\n      // Load the parameter values\n      base_message = this->get_parameter("base_message").as_string();\n      topic_name = this->get_parameter("topic").as_string();\n  }\n\n  // This function is called every 500ms by the timer\n  void timer_callback()\n  {\n      // Create a new String message\n      auto message = std_msgs::msg::String();\n      \n      // Set the message data to be the base message + the current count\n      message.data = base_message + " " + std::to_string(count_++);\n      \n      // Log the published message for the user to see\n      RCLCPP_INFO(this->get_logger(), "Publishing to: \'%s\', Message: \'%s\'", publisher_->get_topic_name(), message.data.c_str());\n\n      // Publish the message\n      publisher_->publish(message);\n  }\n  \n  // Private member variables\n  rclcpp::TimerBase::SharedPtr timer_;  // Timer triggering the publishing\n  rclcpp::Publisher<std_msgs::msg::String>::SharedPtr publisher_;  // Publisher object\n  size_t count_;  // Counter for the messages\n  std::string base_message; // Base message to be published\n  std::string topic_name; // Topic name to publish to\n  };\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This class inherits from ",(0,r.jsx)(n.code,{children:"rclcpp::Node"}),", which means it represents a node in the ROS system. Every this in the code is referring to the node."]}),"\n",(0,r.jsxs)(n.li,{children:["In the constructor (",(0,r.jsx)(n.code,{children:"MinimalPublisher()"}),"), the node is initialized with a name (",(0,r.jsx)(n.code,{children:"minimal_publisher"}),"), a publisher is created for a topic, and a timer is set up to call a callback function (",(0,r.jsx)(n.code,{children:"timer_callback"}),") every 500 milliseconds."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"declareParameters()"})," function declares parameters with default values. Parameters in ROS 2 can be thought of as configurable settings for the node that can be set externally."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"loadParameters()"})," function retrieves the values of the parameters."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"RCLCPP_INFO"})," macro ensures every published message is printed to the console."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"timer_callback()"})," function is the main part of the publisher. Every 500ms, it creates a message with a counter appended to a base message and then publishes it on a specified topic."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"3. Main Function:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"// Main function\nint main(int argc, char * argv[])\n{\n// Initialize the ROS 2 communication\nrclcpp::init(argc, argv);\n\n// Create an instance of MinimalPublisher and keep it responsive to callbacks\nrclcpp::spin(std::make_shared<MinimalPublisher>());\n\n// Clean up and shut down the ROS 2 communication\nrclcpp::shutdown();\n\nreturn 0;\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Initializes ROS 2 communications."}),"\n",(0,r.jsx)(n.li,{children:"Creates and runs the MinimalPublisher node."}),"\n",(0,r.jsx)(n.li,{children:"Once the node is done, the ROS 2 communications are shut down."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"subscriber-node-listener",children:"Subscriber Node (Listener)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"subscriber_node.cpp"})," is a simple example of a ROS 2 subscriber node using the ",(0,r.jsx)(n.code,{children:"rclcpp"})," library. The code creates a ROS 2 subscriber node that listens to messages on a specified topic. Upon receiving a message, the node processes and acts on the data based on its internal logic, with specifics like the ",(0,r.jsx)(n.code,{children:"topic_name"})," being configurable via parameters."]}),"\n",(0,r.jsx)(n.p,{children:"Let's breakdown and examine the code:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"1. Headers and Namespace:"}),"\nIt is identical to the publisher node."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'#include <memory>\n#include "rclcpp/rclcpp.hpp"\n#include "std_msgs/msg/string.hpp"\nusing std::placeholders::_1;\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. MinimalSubscriber Class:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'class MinimalSubscriber : public rclcpp::Node\n{\npublic:\n    // Constructor\n    MinimalSubscriber()\n    : Node("minimal_subscriber")  // Initialize the node with the name "minimal_subscriber"\n    {\n\n    // Decleare and Load the parameters\n    declareParameters();\n    loadParameters();\n\n    // Create a subscription to the "topic" with a queue size of 10.\n    // The std::bind function is used to bind the topic_callback function \n    // to this subscription, with the placeholder _1 being replaced by the received message.\n    subscriber_ = this->create_subscription<std_msgs::msg::String>(\n        topic_name, 10, std::bind(&MinimalSubscriber::topic_callback, this, _1));\n    }\n\nprivate:\n    void declareParameters()\n    {\n        // Declare the parameters with a default value\n        this->declare_parameter<std::string>("topic", "default_topic");\n    }\n    void loadParameters()\n    {\n        // Load the parameter values\n        topic_name = this->get_parameter("topic").as_string();\n    }\n    // Callback function for when a message is received on the  subscribed topic\n    void topic_callback(const std_msgs::msg::String::SharedPtr msg) const\n    {\n        // Log the received message for the user to see\n        RCLCPP_INFO(this->get_logger(), "I heard: \'%s\'", msg->data.c_str());\n    } \n    // Private member variable to store the subscription object\n    rclcpp::Subscription<std_msgs::msg::String>::SharedPtr subscriber_;\n    std::string topic_name; // Topic name to publish to\n};\n\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Derived from rclcpp::Node, the base class for all ROS 2  nodes."}),"\n",(0,r.jsxs)(n.li,{children:["Load and Decleare parameter methos to get ",(0,r.jsx)(n.code,{children:"topic"})," parameter."]}),"\n",(0,r.jsxs)(n.li,{children:['Initializes the node with the name "',(0,r.jsx)(n.code,{children:"minimal_subscriber"}),'". Creates a subscription to a topic named "topic". Sets the queue size to 10.Binds the ',(0,r.jsx)(n.code,{children:"topic_callback"})," function to process incoming messages."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"3. Main Function:"}),"\nIt is identical to the publisher node."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:"rclcpp::init(argc, argv);\nrclcpp::spin(std::make_shared<MinimalSubscriber>());\nrclcpp::shutdown();\nreturn 0;\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"packagexml",children:"Package.xml"}),"\n",(0,r.jsx)(n.p,{children:"In ROS 2 (Robot Operating System 2), the package.xml file is a crucial part of any ROS 2 package. It provides metadata about the package, such as its name, version, authors, dependencies, and more."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Let's examine the code:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0"?>\n<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>\n<package format="3">\n  <name>cpp_pubsub_tutorial</name>\n  <version>0.0.0</version>\n  <description>This package is a publisher subscriber tutorial for ROS2 with Cpp </description>\n  <maintainer email="acdc@ika.rwth-aachen.de">ACDC</maintainer>\n  <license>MIT</license>\n\n  <buildtool_depend>ament_cmake</buildtool_depend>\n  <depend>rclcpp</depend>\n  <depend>std_msgs</depend>\n\n  <test_depend>ament_lint_auto</test_depend>\n  <test_depend>ament_lint_common</test_depend>\n\n  <export>\n    <build_type>ament_cmake</build_type>\n  </export>\n</package>\n\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["As mentioned in the Publisher node we should add dependincies. In package.xml file, we use ",(0,r.jsx)(n.code,{children:"<depend>package<depend>"})]}),"\n",(0,r.jsxs)(n.li,{children:["In this package, we add ",(0,r.jsx)(n.a,{href:"https://docs.ros2.org/foxy/api/rclcpp/index.html",children:"rclpp"})," and ",(0,r.jsx)(n.a,{href:"https://docs.ros2.org/galactic/api/std_msgs/index-msg.html",children:"std_msgs"}),". This declares the package needs ",(0,r.jsx)(n.code,{children:"rclcpp"})," and ",(0,r.jsx)(n.code,{children:"std_msgs"})," when its code is built and executed."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"cmakeliststxt",children:"CMakeLists.txt"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"CMakeLists.txt"})," defines how the packages are built, dependencies are linked, executables are created, and how messages/services are generated, especially when working with C++ projects in ROS 2."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Let's examine the crucial part of the code:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cmake",children:"#Package name\nproject(cpp_pubsub_tutorial)\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(rclcpp REQUIRED)\nfind_package(std_msgs REQUIRED)\n# uncomment the following section in order to fill in\n# further dependencies manually.\n# find_package(<dependency> REQUIRED)\n\n#Executables for publisher and subscriber\nadd_executable(publisher src/publisher_node.cpp)\nament_target_dependencies(publisher \n    rclcpp \n    std_msgs)\n\nadd_executable(subscriber src/subscriber_node.cpp)\nament_target_dependencies(subscriber \n    rclcpp \n    std_msgs)\n\n# Set the install directories to the correct locations\ninstall(\n    DIRECTORY include launch config\n    DESTINATION share/${PROJECT_NAME}/\n)\n\n# Install the executables\ninstall(TARGETS\n  publisher\n  subscriber\n  DESTINATION lib/${PROJECT_NAME}\n)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Package Name"}),": ",(0,r.jsx)(n.code,{children:"project(cpp_pubsub_tutorial)"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Find Dependincies"}),": ",(0,r.jsx)(n.code,{children:"find_package"})," searches for packages specified by their names. For ROS 2 packages, these will often be ROS 2 middleware packages or message/service packages."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Executables"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"publisher"}),": Compiled from the source file ",(0,r.jsx)(n.code,{children:"src/publisher_node.cpp"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"subscriber"}),": Compiled from the source file ",(0,r.jsx)(n.code,{children:"src/subscriber_node.cpp"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ament_target_dependencies"})," specifies which ROS 2 packages the executables are dependent on. Both the publisher and subscriber are dependent on ",(0,r.jsx)(n.code,{children:"rclcpp"})," and ",(0,r.jsx)(n.code,{children:"std_msgs"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Install Directories"}),": This section specifies which directories and their contents are to be installed."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"include"}),": Often used for header files in C++ projects."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"launch"}),": Contains launch files that determine how nodes are started and configured."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config"}),": Might contain configuration files such as parameters."]}),"\n",(0,r.jsxs)(n.li,{children:["The installed directories are placed in ",(0,r.jsx)(n.code,{children:"share/${PROJECT_NAME}/"}),", where ",(0,r.jsx)(n.code,{children:"${PROJECT_NAME}"})," is a variable holding the name of the project as specified earlier in the CMakeLists.txt with the ",(0,r.jsx)(n.code,{children:"project()"})," command."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Install Executables"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This section specifies that the ",(0,r.jsx)(n.code,{children:"publisher"})," and ",(0,r.jsx)(n.code,{children:"subscriber"})," executables should be installed. The install location for these executables is ",(0,r.jsx)(n.code,{children:"lib/${PROJECT_NAME}"}),", which is standard for ROS 2 nodes."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"start-the-ros2-nodes",children:"Start the ROS2 nodes"}),"\n",(0,r.jsxs)(n.p,{children:["In your fist terminal, ",(0,r.jsx)(n.code,{children:"source"})," the colcon workspace."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"source /home/rosuser/ws/colcon_workspace/install/setup.bash\n"})}),"\n",(0,r.jsxs)(n.p,{children:["cpp_pub_sub.launchcpp_pub_sub.launch\nThen, start the publisher and subscriber node using ",(0,r.jsx)(n.code,{children:"ros2 launch"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"ros2 launch cpp_pubsub_tutorial cpp_pub_sub.launch.py \n"})}),"\n",(0,r.jsx)(n.h3,{id:"note-about-ros2-launch-files",children:"Note about ROS2 launch files"}),"\n",(0,r.jsxs)(n.p,{children:["This script defines a ROS 2 launch file that starts both a publisher node and a subscriber node from the cpp_pubsub_tutorial package, using a shared configuration file named ",(0,r.jsx)(n.code,{children:"params.yaml"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Contents of the file ",(0,r.jsx)(n.code,{children:"cpp_pub_sub.launch.py"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# 'os' is for file and directory operations\nimport os\n# 'get_package_share_directory' is used to find a package's shared directory in a ROS2 environment.\nfrom ament_index_python.packages import get_package_share_directory\n# 'LaunchDescription' helps describe the nodes to be launched in a ROS2 system.\nfrom launch import LaunchDescription\n# 'Node' is an action that represents a node in the ROS2 graph.\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    # Fetching the shared directory path for the 'racing' package.\n    cpp_pubsub_tutorial_dir = get_package_share_directory('cpp_pubsub_tutorial')\n    # Constructing the path to the configuration file 'params.yaml'.\n    config = os.path.join(cpp_pubsub_tutorial_dir, 'config', 'params.yaml')\n\n    # Defining a node for the publisher.\n    publisher_node = Node(package='cpp_pubsub_tutorial', \n                                   executable='publisher',\n                                   name='publisher_node', \n                                   output='screen',\n                                   parameters=[config])\n    \n    # Defining a node for the subscriber.\n    subscriber_node = Node(package='cpp_pubsub_tutorial', \n                              executable='subscriber',\n                              name='subscriber_node',\n                              output='screen',\n                              parameters=[config])\n\n    # Creating a LaunchDescription object to store the nodes.\n    ld = LaunchDescription()\n\n    # Adding both nodes to the launch description.\n    ld.add_action(publisher_node)\n    ld.add_action(subscriber_node)\n\n    # Returning the launch description, which is used by the ROS2 launch system.\n    return ld\n"})}),"\n",(0,r.jsx)(n.p,{children:"Hence, we perform the following tasks:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Imports"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"os"}),": Used for file and directory operations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"get_package_share_directory"}),": Gets the shared directory of a given ROS 2 package."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"LaunchDescription"}),": Allows you to define a set of nodes to be launched together."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Node"}),": Represents a node action in the ROS 2 graph that will be launched."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Function: ",(0,r.jsx)(n.code,{children:"generate_launch_description"}),"():"]}),"\nThis function generates the description of what needs to be launched."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["It first determines the shared directory for the ",(0,r.jsx)(n.code,{children:"cpp_pubsub_tutorial"})," package."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Constructs the full path to a configuration file (",(0,r.jsx)(n.code,{children:"params.yaml"}),") which is located inside a ",(0,r.jsx)(n.code,{children:"config"})," folder in the cpp_pubsub_tutorial package's shared directory."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Defines a publisher node with the following specifications:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Package name: ",(0,r.jsx)(n.code,{children:"cpp_pubsub_tutorial"})]}),"\n",(0,r.jsxs)(n.li,{children:["Executable name (the node's binary): ",(0,r.jsx)(n.code,{children:"publisher"})]}),"\n",(0,r.jsxs)(n.li,{children:["Node name in the ROS 2 graph: ",(0,r.jsx)(n.code,{children:"publisher_node"})]}),"\n",(0,r.jsxs)(n.li,{children:["Output logs to: ",(0,r.jsx)(n.code,{children:"screen"})]}),"\n",(0,r.jsxs)(n.li,{children:["Configuration parameters: From the ",(0,r.jsx)(n.code,{children:"params.yaml"})," file"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Similarly, it defines a subscriber node."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Creates a ",(0,r.jsx)(n.code,{children:"LaunchDescription"})," object. This object will hold all the nodes that are to be launched together."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Adds both the publisher and subscriber nodes to the LaunchDescription object."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Finally, it returns the ",(0,r.jsx)(n.code,{children:"LaunchDescription"})," object, which tells the ROS 2 launch system what nodes to start when this launch file is invoked."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The default configuration ",(0,r.jsx)(n.code,{children:"params.yaml"})," is held in an external ",(0,r.jsx)(n.code,{children:".yaml"})," file instead of the launch file itself."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'publisher_node:\n  ros__parameters:\n    base_message: "ROS2 is awesome!"\n    topic: "cpp_pubsub_tutorial"\n\nsubscriber_node:\n  ros__parameters:\n    topic: "cpp_pubsub_tutorial"\n'})}),"\n",(0,r.jsx)(n.p,{children:"When you launch the file you should see in the screen:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Talker logging the what topic to and message published"}),"\n",(0,r.jsx)(n.li,{children:"Listener logging the message published by talker"}),"\n"]}),"\n",(0,r.jsx)("img",{src:"../images/section_1/cpp_pub_sub_tutorial_result.png",alt:"Description of image"}),"\n",(0,r.jsx)(n.h2,{id:"wrap-up",children:"Wrap-up"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'You are introduced to the creation of ROS2 C++ nodes, specifically focusing on the "talker" and "listener" setup.'}),"\n",(0,r.jsx)(n.li,{children:"You gained an understanding of the publisher-subscriber model in ROS2, where one node sends data (publisher) and another receives it (subscriber)."}),"\n",(0,r.jsx)(n.li,{children:"You've explored the configuration of a ROS2 C++ package."}),"\n",(0,r.jsx)(n.li,{children:"You examined into the foundational concepts surrounding ROS2, including ROS2 launch and config files."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var i=s(6540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);